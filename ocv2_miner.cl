

#ifdef cl_khr_fp64
#pragma OPENCL EXTENSION cl_khr_fp64 : enable
#elif defined(cl_amd_fp64)
#pragma OPENCL EXTENSION cl_amd_fp64 : enable
#else
#error "Double precision floating point not supported by OpenCL implementation."
#endif

inline uint SWAP(uint val) {
  return (rotate(((val)&0x00FF00FF), 24U) | rotate(((val)&0xFF00FF00), 8U));
}

#define F1(x, y, z) (bitselect(z, y, x))
#define F0(x, y, z) (bitselect(x, y, ((x) ^ (z))))
#define mod(x, y) ((x) - ((x) / (y) * (y)))
#define shr32(x, n) ((x) >> (n))
#define rotl32(a, n) rotate((a), (n))

#define S0(x) (rotl32((x), 25u) ^ rotl32((x), 14u) ^ shr32((x), 3u))
#define S1(x) (rotl32((x), 15u) ^ rotl32((x), 13u) ^ shr32((x), 10u))
#define S2(x) (rotl32((x), 30u) ^ rotl32((x), 19u) ^ rotl32((x), 10u))
#define S3(x) (rotl32((x), 26u) ^ rotl32((x), 21u) ^ rotl32((x), 7u))

#define SHA256C00 0x428a2f98u
#define SHA256C01 0x71374491u
#define SHA256C02 0xb5c0fbcfu
#define SHA256C03 0xe9b5dba5u
#define SHA256C04 0x3956c25bu
#define SHA256C05 0x59f111f1u
#define SHA256C06 0x923f82a4u
#define SHA256C07 0xab1c5ed5u
#define SHA256C08 0xd807aa98u
#define SHA256C09 0x12835b01u
#define SHA256C0a 0x243185beu
#define SHA256C0b 0x550c7dc3u
#define SHA256C0c 0x72be5d74u
#define SHA256C0d 0x80deb1feu
#define SHA256C0e 0x9bdc06a7u
#define SHA256C0f 0xc19bf174u
#define SHA256C10 0xe49b69c1u
#define SHA256C11 0xefbe4786u
#define SHA256C12 0x0fc19dc6u
#define SHA256C13 0x240ca1ccu
#define SHA256C14 0x2de92c6fu
#define SHA256C15 0x4a7484aau
#define SHA256C16 0x5cb0a9dcu
#define SHA256C17 0x76f988dau
#define SHA256C18 0x983e5152u
#define SHA256C19 0xa831c66du
#define SHA256C1a 0xb00327c8u
#define SHA256C1b 0xbf597fc7u
#define SHA256C1c 0xc6e00bf3u
#define SHA256C1d 0xd5a79147u
#define SHA256C1e 0x06ca6351u
#define SHA256C1f 0x14292967u
#define SHA256C20 0x27b70a85u
#define SHA256C21 0x2e1b2138u
#define SHA256C22 0x4d2c6dfcu
#define SHA256C23 0x53380d13u
#define SHA256C24 0x650a7354u
#define SHA256C25 0x766a0abbu
#define SHA256C26 0x81c2c92eu
#define SHA256C27 0x92722c85u
#define SHA256C28 0xa2bfe8a1u
#define SHA256C29 0xa81a664bu
#define SHA256C2a 0xc24b8b70u
#define SHA256C2b 0xc76c51a3u
#define SHA256C2c 0xd192e819u
#define SHA256C2d 0xd6990624u
#define SHA256C2e 0xf40e3585u
#define SHA256C2f 0x106aa070u
#define SHA256C30 0x19a4c116u
#define SHA256C31 0x1e376c08u
#define SHA256C32 0x2748774cu
#define SHA256C33 0x34b0bcb5u
#define SHA256C34 0x391c0cb3u
#define SHA256C35 0x4ed8aa4au
#define SHA256C36 0x5b9cca4fu
#define SHA256C37 0x682e6ff3u
#define SHA256C38 0x748f82eeu
#define SHA256C39 0x78a5636fu
#define SHA256C3a 0x84c87814u
#define SHA256C3b 0x8cc70208u
#define SHA256C3c 0x90befffau
#define SHA256C3d 0xa4506cebu
#define SHA256C3e 0xbef9a3f7u
#define SHA256C3f 0xc67178f2u

__constant uint k_sha256[64] = {
    SHA256C00, SHA256C01, SHA256C02, SHA256C03, SHA256C04, SHA256C05, SHA256C06,
    SHA256C07, SHA256C08, SHA256C09, SHA256C0a, SHA256C0b, SHA256C0c, SHA256C0d,
    SHA256C0e, SHA256C0f, SHA256C10, SHA256C11, SHA256C12, SHA256C13, SHA256C14,
    SHA256C15, SHA256C16, SHA256C17, SHA256C18, SHA256C19, SHA256C1a, SHA256C1b,
    SHA256C1c, SHA256C1d, SHA256C1e, SHA256C1f, SHA256C20, SHA256C21, SHA256C22,
    SHA256C23, SHA256C24, SHA256C25, SHA256C26, SHA256C27, SHA256C28, SHA256C29,
    SHA256C2a, SHA256C2b, SHA256C2c, SHA256C2d, SHA256C2e, SHA256C2f, SHA256C30,
    SHA256C31, SHA256C32, SHA256C33, SHA256C34, SHA256C35, SHA256C36, SHA256C37,
    SHA256C38, SHA256C39, SHA256C3a, SHA256C3b, SHA256C3c, SHA256C3d, SHA256C3e,
    SHA256C3f,
};

#define SHA256_STEP(F0a, F1a, a, b, c, d, e, f, g, h, x, K) \
  {                                                         \
    h += K;                                                 \
    h += x;                                                 \
    h += S3(e);                                             \
    h += F1a(e, f, g);                                      \
    d += h;                                                 \
    h += S2(a);                                             \
    h += F0a(a, b, c);                                      \
  }

#define SHA256_EXPAND(x, y, z, w) (S1(x) + y + S0(z) + w)

void sha256_process2(const uint* W, uint* digest) {
  uint a = digest[0];
  uint b = digest[1];
  uint c = digest[2];
  uint d = digest[3];
  uint e = digest[4];
  uint f = digest[5];
  uint g = digest[6];
  uint h = digest[7];

  uint w0_t = W[0];
  uint w1_t = W[1];
  uint w2_t = W[2];
  uint w3_t = W[3];
  uint w4_t = W[4];
  uint w5_t = W[5];
  uint w6_t = W[6];
  uint w7_t = W[7];
  uint w8_t = W[8];
  uint w9_t = W[9];
  uint wa_t = W[10];
  uint wb_t = W[11];
  uint wc_t = W[12];
  uint wd_t = W[13];
  uint we_t = W[14];
  uint wf_t = W[15];

#define ROUND_EXPAND(i)                           \
  {                                               \
    w0_t = SHA256_EXPAND(we_t, w9_t, w1_t, w0_t); \
    w1_t = SHA256_EXPAND(wf_t, wa_t, w2_t, w1_t); \
    w2_t = SHA256_EXPAND(w0_t, wb_t, w3_t, w2_t); \
    w3_t = SHA256_EXPAND(w1_t, wc_t, w4_t, w3_t); \
    w4_t = SHA256_EXPAND(w2_t, wd_t, w5_t, w4_t); \
    w5_t = SHA256_EXPAND(w3_t, we_t, w6_t, w5_t); \
    w6_t = SHA256_EXPAND(w4_t, wf_t, w7_t, w6_t); \
    w7_t = SHA256_EXPAND(w5_t, w0_t, w8_t, w7_t); \
    w8_t = SHA256_EXPAND(w6_t, w1_t, w9_t, w8_t); \
    w9_t = SHA256_EXPAND(w7_t, w2_t, wa_t, w9_t); \
    wa_t = SHA256_EXPAND(w8_t, w3_t, wb_t, wa_t); \
    wb_t = SHA256_EXPAND(w9_t, w4_t, wc_t, wb_t); \
    wc_t = SHA256_EXPAND(wa_t, w5_t, wd_t, wc_t); \
    wd_t = SHA256_EXPAND(wb_t, w6_t, we_t, wd_t); \
    we_t = SHA256_EXPAND(wc_t, w7_t, wf_t, we_t); \
    wf_t = SHA256_EXPAND(wd_t, w8_t, w0_t, wf_t); \
  }

#define ROUND_STEP(i)                                                    \
  {                                                                      \
    SHA256_STEP(F0, F1, a, b, c, d, e, f, g, h, w0_t, k_sha256[i + 0]);  \
    SHA256_STEP(F0, F1, h, a, b, c, d, e, f, g, w1_t, k_sha256[i + 1]);  \
    SHA256_STEP(F0, F1, g, h, a, b, c, d, e, f, w2_t, k_sha256[i + 2]);  \
    SHA256_STEP(F0, F1, f, g, h, a, b, c, d, e, w3_t, k_sha256[i + 3]);  \
    SHA256_STEP(F0, F1, e, f, g, h, a, b, c, d, w4_t, k_sha256[i + 4]);  \
    SHA256_STEP(F0, F1, d, e, f, g, h, a, b, c, w5_t, k_sha256[i + 5]);  \
    SHA256_STEP(F0, F1, c, d, e, f, g, h, a, b, w6_t, k_sha256[i + 6]);  \
    SHA256_STEP(F0, F1, b, c, d, e, f, g, h, a, w7_t, k_sha256[i + 7]);  \
    SHA256_STEP(F0, F1, a, b, c, d, e, f, g, h, w8_t, k_sha256[i + 8]);  \
    SHA256_STEP(F0, F1, h, a, b, c, d, e, f, g, w9_t, k_sha256[i + 9]);  \
    SHA256_STEP(F0, F1, g, h, a, b, c, d, e, f, wa_t, k_sha256[i + 10]); \
    SHA256_STEP(F0, F1, f, g, h, a, b, c, d, e, wb_t, k_sha256[i + 11]); \
    SHA256_STEP(F0, F1, e, f, g, h, a, b, c, d, wc_t, k_sha256[i + 12]); \
    SHA256_STEP(F0, F1, d, e, f, g, h, a, b, c, wd_t, k_sha256[i + 13]); \
    SHA256_STEP(F0, F1, c, d, e, f, g, h, a, b, we_t, k_sha256[i + 14]); \
    SHA256_STEP(F0, F1, b, c, d, e, f, g, h, a, wf_t, k_sha256[i + 15]); \
  }

  ROUND_STEP(0);

  ROUND_EXPAND();
  ROUND_STEP(16);

  ROUND_EXPAND();
  ROUND_STEP(32);

  ROUND_EXPAND();
  ROUND_STEP(48);

  digest[0] += a;
  digest[1] += b;
  digest[2] += c;
  digest[3] += d;
  digest[4] += e;
  digest[5] += f;
  digest[6] += g;
  digest[7] += h;
}

#define def_hash(funcName, passTag, hashTag)                                  \
  /* The main hashing function */                                             \
  void funcName(passTag const uint* pass, int pass_len, hashTag uint* hash) { \
    int plen = pass_len / 4;                                                  \
    if (mod(pass_len, 4)) plen++;                                             \
                                                                              \
    uint slidePadding = 0;                                                    \
    if (mod(pass_len, 64) >= 56) slidePadding = 1;                            \
                                                                              \
    hashTag uint* p = hash;                                                   \
                                                                              \
    uint W[0x10] = {0};                                                       \
    int loops = plen;                                                         \
    int curloop = 0;                                                          \
    uint State[8] = {0};                                                      \
    State[0] = 0x6a09e667;                                                    \
    State[1] = 0xbb67ae85;                                                    \
    State[2] = 0x3c6ef372;                                                    \
    State[3] = 0xa54ff53a;                                                    \
    State[4] = 0x510e527f;                                                    \
    State[5] = 0x9b05688c;                                                    \
    State[6] = 0x1f83d9ab;                                                    \
    State[7] = 0x5be0cd19;                                                    \
                                                                              \
    while (loops > 0) {                                                       \
      W[0x0] = 0x0;                                                           \
      W[0x1] = 0x0;                                                           \
      W[0x2] = 0x0;                                                           \
      W[0x3] = 0x0;                                                           \
      W[0x4] = 0x0;                                                           \
      W[0x5] = 0x0;                                                           \
      W[0x6] = 0x0;                                                           \
      W[0x7] = 0x0;                                                           \
      W[0x8] = 0x0;                                                           \
      W[0x9] = 0x0;                                                           \
      W[0xA] = 0x0;                                                           \
      W[0xB] = 0x0;                                                           \
      W[0xC] = 0x0;                                                           \
      W[0xD] = 0x0;                                                           \
      W[0xE] = 0x0;                                                           \
      W[0xF] = 0x0;                                                           \
                                                                              \
      for (int m = 0; loops != 0 && m < 16; m++) {                            \
        W[m] ^= SWAP(pass[m + (curloop * 16)]);                               \
        loops--;                                                              \
      }                                                                       \
                                                                              \
      if (loops == 0 && mod(pass_len, 64) != 0) {                             \
        uint padding = 0x80                                                   \
                       << (((pass_len + 4) - ((pass_len + 4) / 4 * 4)) * 8);  \
        int v = mod(pass_len, 64);                                            \
        W[v / 4] |= SWAP(padding);                                            \
        if (slidePadding == 0) {                                              \
          /* Let's add length */                                              \
          W[0x0F] = pass_len * 8;                                             \
        }                                                                     \
      }                                                                       \
                                                                              \
      sha256_process2(W, State);                                              \
      curloop++;                                                              \
    }                                                                         \
                                                                              \
    if (slidePadding != 0) {                                                  \
      W[0x0] = 0x0;                                                           \
      W[0x1] = 0x0;                                                           \
      W[0x2] = 0x0;                                                           \
      W[0x3] = 0x0;                                                           \
      W[0x4] = 0x0;                                                           \
      W[0x5] = 0x0;                                                           \
      W[0x6] = 0x0;                                                           \
      W[0x7] = 0x0;                                                           \
      W[0x8] = 0x0;                                                           \
      W[0x9] = 0x0;                                                           \
      W[0xA] = 0x0;                                                           \
      W[0xB] = 0x0;                                                           \
      W[0xC] = 0x0;                                                           \
      W[0xD] = 0x0;                                                           \
      W[0xE] = 0x0;                                                           \
      W[0x0F] = pass_len * 8;                                                 \
                                                                              \
      sha256_process2(W, State);                                              \
    } else {                                                                  \
      if (mod(plen, 16) == 0) {                                               \
        W[0x0] = 0x80000000;                                                  \
        W[0x1] = 0x0;                                                         \
        W[0x2] = 0x0;                                                         \
        W[0x3] = 0x0;                                                         \
        W[0x4] = 0x0;                                                         \
        W[0x5] = 0x0;                                                         \
        W[0x6] = 0x0;                                                         \
        W[0x7] = 0x0;                                                         \
        W[0x8] = 0x0;                                                         \
        W[0x9] = 0x0;                                                         \
        W[0xA] = 0x0;                                                         \
        W[0xB] = 0x0;                                                         \
        W[0xC] = 0x0;                                                         \
        W[0xD] = 0x0;                                                         \
        W[0xE] = 0x0;                                                         \
        W[0x0F] = pass_len * 8;                                               \
                                                                              \
        sha256_process2(W, State);                                            \
      }                                                                       \
    }                                                                         \
                                                                              \
    p[0] = SWAP(State[0]);                                                    \
    p[1] = SWAP(State[1]);                                                    \
    p[2] = SWAP(State[2]);                                                    \
    p[3] = SWAP(State[3]);                                                    \
    p[4] = SWAP(State[4]);                                                    \
    p[5] = SWAP(State[5]);                                                    \
    p[6] = SWAP(State[6]);                                                    \
    p[7] = SWAP(State[7]);                                                    \
    return;                                                                   \
  }

def_hash(hash_global, __global, __global)
    def_hash(hash_private, __private, __private)
        def_hash(hash_glbl_to_priv, __global, __private)
            def_hash(hash_priv_to_glbl, __private, __global)
#undef F0
#undef F1
#undef S0
#undef S1
#undef S2
#undef S3

#undef mod
#undef shr32
#undef rotl32

#define OCV2_ROUND(value) ((int)((value) + ((value) >= 0 ? 0.5 : -0.5)))

#define OCV2_ROUND_AND_CLIP_PIXEL_VALUE(value) (uchar)((value) >= 254.5 ? 255 : ((value) < 0 ? 0 : (value + 0.5)))

                void _24x24_bmpdata_uchar_switch(__private const uchar* s,__private uchar* d) {
  for (int k = 0, v = 1656; k <= 71; k++, v++) d[k] = s[v];
  for (int k = 72, v = 1584; k <= 143; k++, v++) d[k] = s[v];
  for (int k = 144, v = 1512; k <= 215; k++, v++) d[k] = s[v];
  for (int k = 216, v = 1440; k <= 287; k++, v++) d[k] = s[v];
  for (int k = 288, v = 1368; k <= 359; k++, v++) d[k] = s[v];
  for (int k = 360, v = 1296; k <= 431; k++, v++) d[k] = s[v];
  for (int k = 432, v = 1224; k <= 503; k++, v++) d[k] = s[v];
  for (int k = 504, v = 1152; k <= 575; k++, v++) d[k] = s[v];
  for (int k = 576, v = 1080; k <= 647; k++, v++) d[k] = s[v];
  for (int k = 648, v = 1008; k <= 719; k++, v++) d[k] = s[v];
  for (int k = 720, v = 936; k <= 791; k++, v++) d[k] = s[v];
  for (int k = 792, v = 864; k <= 863; k++, v++) d[k] = s[v];
  for (int k = 864, v = 792; k <= 935; k++, v++) d[k] = s[v];
  for (int k = 936, v = 720; k <= 1007; k++, v++) d[k] = s[v];
  for (int k = 1008, v = 648; k <= 1079; k++, v++) d[k] = s[v];
  for (int k = 1080, v = 576; k <= 1151; k++, v++) d[k] = s[v];
  for (int k = 1152, v = 504; k <= 1223; k++, v++) d[k] = s[v];
  for (int k = 1224, v = 432; k <= 1295; k++, v++) d[k] = s[v];
  for (int k = 1296, v = 360; k <= 1367; k++, v++) d[k] = s[v];
  for (int k = 1368, v = 288; k <= 1439; k++, v++) d[k] = s[v];
  for (int k = 1440, v = 216; k <= 1511; k++, v++) d[k] = s[v];
  for (int k = 1512, v = 144; k <= 1583; k++, v++) d[k] = s[v];
  for (int k = 1584, v = 72; k <= 1655; k++, v++) d[k] = s[v];
  for (int k = 1656, v = 0; k <= 1727; k++, v++) d[k] = s[v];
}

void _24x24_copyMakeBorder_2_2_2_2_BORDER_REFLECT_101(__private const uchar* s,
                                                      __private uchar* d) {
  d[0] = s[150];
  d[1] = s[151];
  d[2] = s[152];
  d[3] = s[147];
  d[4] = s[148];
  d[5] = s[149];
  for (int k = 6, v = 144; k <= 77; k++, v++) d[k] = s[v];
  d[78] = s[210];
  d[79] = s[211];
  d[80] = s[212];
  d[81] = s[207];
  d[82] = s[208];
  d[83] = s[209];
  d[84] = s[78];
  d[85] = s[79];
  d[86] = s[80];
  d[87] = s[75];
  d[88] = s[76];
  d[89] = s[77];
  for (int k = 90, v = 72; k <= 161; k++, v++) d[k] = s[v];
  d[162] = s[138];
  d[163] = s[139];
  d[164] = s[140];
  d[165] = s[135];
  d[166] = s[136];
  d[167] = s[137];
  d[168] = s[6];
  d[169] = s[7];
  d[170] = s[8];
  d[171] = s[3];
  d[172] = s[4];
  d[173] = s[5];
  for (int k = 174, v = 0; k <= 245; k++, v++) d[k] = s[v];
  d[246] = s[66];
  d[247] = s[67];
  d[248] = s[68];
  d[249] = s[63];
  d[250] = s[64];
  d[251] = s[65];
  d[252] = s[78];
  d[253] = s[79];
  d[254] = s[80];
  d[255] = s[75];
  d[256] = s[76];
  d[257] = s[77];
  for (int k = 258, v = 72; k <= 329; k++, v++) d[k] = s[v];
  d[330] = s[138];
  d[331] = s[139];
  d[332] = s[140];
  d[333] = s[135];
  d[334] = s[136];
  d[335] = s[137];
  d[336] = s[150];
  d[337] = s[151];
  d[338] = s[152];
  d[339] = s[147];
  d[340] = s[148];
  d[341] = s[149];
  for (int k = 342, v = 144; k <= 413; k++, v++) d[k] = s[v];
  d[414] = s[210];
  d[415] = s[211];
  d[416] = s[212];
  d[417] = s[207];
  d[418] = s[208];
  d[419] = s[209];
  d[420] = s[222];
  d[421] = s[223];
  d[422] = s[224];
  d[423] = s[219];
  d[424] = s[220];
  d[425] = s[221];
  for (int k = 426, v = 216; k <= 497; k++, v++) d[k] = s[v];
  d[498] = s[282];
  d[499] = s[283];
  d[500] = s[284];
  d[501] = s[279];
  d[502] = s[280];
  d[503] = s[281];
  d[504] = s[294];
  d[505] = s[295];
  d[506] = s[296];
  d[507] = s[291];
  d[508] = s[292];
  d[509] = s[293];
  for (int k = 510, v = 288; k <= 581; k++, v++) d[k] = s[v];
  d[582] = s[354];
  d[583] = s[355];
  d[584] = s[356];
  d[585] = s[351];
  d[586] = s[352];
  d[587] = s[353];
  d[588] = s[366];
  d[589] = s[367];
  d[590] = s[368];
  d[591] = s[363];
  d[592] = s[364];
  d[593] = s[365];
  for (int k = 594, v = 360; k <= 665; k++, v++) d[k] = s[v];
  d[666] = s[426];
  d[667] = s[427];
  d[668] = s[428];
  d[669] = s[423];
  d[670] = s[424];
  d[671] = s[425];
  d[672] = s[438];
  d[673] = s[439];
  d[674] = s[440];
  d[675] = s[435];
  d[676] = s[436];
  d[677] = s[437];
  for (int k = 678, v = 432; k <= 749; k++, v++) d[k] = s[v];
  d[750] = s[498];
  d[751] = s[499];
  d[752] = s[500];
  d[753] = s[495];
  d[754] = s[496];
  d[755] = s[497];
  d[756] = s[510];
  d[757] = s[511];
  d[758] = s[512];
  d[759] = s[507];
  d[760] = s[508];
  d[761] = s[509];
  for (int k = 762, v = 504; k <= 833; k++, v++) d[k] = s[v];
  d[834] = s[570];
  d[835] = s[571];
  d[836] = s[572];
  d[837] = s[567];
  d[838] = s[568];
  d[839] = s[569];
  d[840] = s[582];
  d[841] = s[583];
  d[842] = s[584];
  d[843] = s[579];
  d[844] = s[580];
  d[845] = s[581];
  for (int k = 846, v = 576; k <= 917; k++, v++) d[k] = s[v];
  d[918] = s[642];
  d[919] = s[643];
  d[920] = s[644];
  d[921] = s[639];
  d[922] = s[640];
  d[923] = s[641];
  d[924] = s[654];
  d[925] = s[655];
  d[926] = s[656];
  d[927] = s[651];
  d[928] = s[652];
  d[929] = s[653];
  for (int k = 930, v = 648; k <= 1001; k++, v++) d[k] = s[v];
  d[1002] = s[714];
  d[1003] = s[715];
  d[1004] = s[716];
  d[1005] = s[711];
  d[1006] = s[712];
  d[1007] = s[713];
  d[1008] = s[726];
  d[1009] = s[727];
  d[1010] = s[728];
  d[1011] = s[723];
  d[1012] = s[724];
  d[1013] = s[725];
  for (int k = 1014, v = 720; k <= 1085; k++, v++) d[k] = s[v];
  d[1086] = s[786];
  d[1087] = s[787];
  d[1088] = s[788];
  d[1089] = s[783];
  d[1090] = s[784];
  d[1091] = s[785];
  d[1092] = s[798];
  d[1093] = s[799];
  d[1094] = s[800];
  d[1095] = s[795];
  d[1096] = s[796];
  d[1097] = s[797];
  for (int k = 1098, v = 792; k <= 1169; k++, v++) d[k] = s[v];
  d[1170] = s[858];
  d[1171] = s[859];
  d[1172] = s[860];
  d[1173] = s[855];
  d[1174] = s[856];
  d[1175] = s[857];
  d[1176] = s[870];
  d[1177] = s[871];
  d[1178] = s[872];
  d[1179] = s[867];
  d[1180] = s[868];
  d[1181] = s[869];
  for (int k = 1182, v = 864; k <= 1253; k++, v++) d[k] = s[v];
  d[1254] = s[930];
  d[1255] = s[931];
  d[1256] = s[932];
  d[1257] = s[927];
  d[1258] = s[928];
  d[1259] = s[929];
  d[1260] = s[942];
  d[1261] = s[943];
  d[1262] = s[944];
  d[1263] = s[939];
  d[1264] = s[940];
  d[1265] = s[941];
  for (int k = 1266, v = 936; k <= 1337; k++, v++) d[k] = s[v];
  d[1338] = s[1002];
  d[1339] = s[1003];
  d[1340] = s[1004];
  d[1341] = s[999];
  d[1342] = s[1000];
  d[1343] = s[1001];
  d[1344] = s[1014];
  d[1345] = s[1015];
  d[1346] = s[1016];
  d[1347] = s[1011];
  d[1348] = s[1012];
  d[1349] = s[1013];
  for (int k = 1350, v = 1008; k <= 1421; k++, v++) d[k] = s[v];
  d[1422] = s[1074];
  d[1423] = s[1075];
  d[1424] = s[1076];
  d[1425] = s[1071];
  d[1426] = s[1072];
  d[1427] = s[1073];
  d[1428] = s[1086];
  d[1429] = s[1087];
  d[1430] = s[1088];
  d[1431] = s[1083];
  d[1432] = s[1084];
  d[1433] = s[1085];
  for (int k = 1434, v = 1080; k <= 1505; k++, v++) d[k] = s[v];
  d[1506] = s[1146];
  d[1507] = s[1147];
  d[1508] = s[1148];
  d[1509] = s[1143];
  d[1510] = s[1144];
  d[1511] = s[1145];
  d[1512] = s[1158];
  d[1513] = s[1159];
  d[1514] = s[1160];
  d[1515] = s[1155];
  d[1516] = s[1156];
  d[1517] = s[1157];
  for (int k = 1518, v = 1152; k <= 1589; k++, v++) d[k] = s[v];
  d[1590] = s[1218];
  d[1591] = s[1219];
  d[1592] = s[1220];
  d[1593] = s[1215];
  d[1594] = s[1216];
  d[1595] = s[1217];
  d[1596] = s[1230];
  d[1597] = s[1231];
  d[1598] = s[1232];
  d[1599] = s[1227];
  d[1600] = s[1228];
  d[1601] = s[1229];
  for (int k = 1602, v = 1224; k <= 1673; k++, v++) d[k] = s[v];
  d[1674] = s[1290];
  d[1675] = s[1291];
  d[1676] = s[1292];
  d[1677] = s[1287];
  d[1678] = s[1288];
  d[1679] = s[1289];
  d[1680] = s[1302];
  d[1681] = s[1303];
  d[1682] = s[1304];
  d[1683] = s[1299];
  d[1684] = s[1300];
  d[1685] = s[1301];
  for (int k = 1686, v = 1296; k <= 1757; k++, v++) d[k] = s[v];
  d[1758] = s[1362];
  d[1759] = s[1363];
  d[1760] = s[1364];
  d[1761] = s[1359];
  d[1762] = s[1360];
  d[1763] = s[1361];
  d[1764] = s[1374];
  d[1765] = s[1375];
  d[1766] = s[1376];
  d[1767] = s[1371];
  d[1768] = s[1372];
  d[1769] = s[1373];
  for (int k = 1770, v = 1368; k <= 1841; k++, v++) d[k] = s[v];
  d[1842] = s[1434];
  d[1843] = s[1435];
  d[1844] = s[1436];
  d[1845] = s[1431];
  d[1846] = s[1432];
  d[1847] = s[1433];
  d[1848] = s[1446];
  d[1849] = s[1447];
  d[1850] = s[1448];
  d[1851] = s[1443];
  d[1852] = s[1444];
  d[1853] = s[1445];
  for (int k = 1854, v = 1440; k <= 1925; k++, v++) d[k] = s[v];
  d[1926] = s[1506];
  d[1927] = s[1507];
  d[1928] = s[1508];
  d[1929] = s[1503];
  d[1930] = s[1504];
  d[1931] = s[1505];
  d[1932] = s[1518];
  d[1933] = s[1519];
  d[1934] = s[1520];
  d[1935] = s[1515];
  d[1936] = s[1516];
  d[1937] = s[1517];
  for (int k = 1938, v = 1512; k <= 2009; k++, v++) d[k] = s[v];
  d[2010] = s[1578];
  d[2011] = s[1579];
  d[2012] = s[1580];
  d[2013] = s[1575];
  d[2014] = s[1576];
  d[2015] = s[1577];
  d[2016] = s[1590];
  d[2017] = s[1591];
  d[2018] = s[1592];
  d[2019] = s[1587];
  d[2020] = s[1588];
  d[2021] = s[1589];
  for (int k = 2022, v = 1584; k <= 2093; k++, v++) d[k] = s[v];
  d[2094] = s[1650];
  d[2095] = s[1651];
  d[2096] = s[1652];
  d[2097] = s[1647];
  d[2098] = s[1648];
  d[2099] = s[1649];
  d[2100] = s[1662];
  d[2101] = s[1663];
  d[2102] = s[1664];
  d[2103] = s[1659];
  d[2104] = s[1660];
  d[2105] = s[1661];
  for (int k = 2106, v = 1656; k <= 2177; k++, v++) d[k] = s[v];
  d[2178] = s[1722];
  d[2179] = s[1723];
  d[2180] = s[1724];
  d[2181] = s[1719];
  d[2182] = s[1720];
  d[2183] = s[1721];
  d[2184] = s[1590];
  d[2185] = s[1591];
  d[2186] = s[1592];
  d[2187] = s[1587];
  d[2188] = s[1588];
  d[2189] = s[1589];
  for (int k = 2190, v = 1584; k <= 2261; k++, v++) d[k] = s[v];
  d[2262] = s[1650];
  d[2263] = s[1651];
  d[2264] = s[1652];
  d[2265] = s[1647];
  d[2266] = s[1648];
  d[2267] = s[1649];
  d[2268] = s[1518];
  d[2269] = s[1519];
  d[2270] = s[1520];
  d[2271] = s[1515];
  d[2272] = s[1516];
  d[2273] = s[1517];
  for (int k = 2274, v = 1512; k <= 2345; k++, v++) d[k] = s[v];
  d[2346] = s[1578];
  d[2347] = s[1579];
  d[2348] = s[1580];
  d[2349] = s[1575];
  d[2350] = s[1576];
  d[2351] = s[1577];
}
void _24x24_copyMakeBorder_1_1_1_1_BORDER_REFLECT_101(__private const uchar* s,
                                                      __private uchar* d) {
  d[0] = s[75];
  d[1] = s[76];
  d[2] = s[77];
  for (int k = 3, v = 72; k <= 74; k++, v++) d[k] = s[v];
  d[75] = s[138];
  d[76] = s[139];
  d[77] = s[140];
  d[78] = s[3];
  d[79] = s[4];
  d[80] = s[5];
  for (int k = 81, v = 0; k <= 152; k++, v++) d[k] = s[v];
  d[153] = s[66];
  d[154] = s[67];
  d[155] = s[68];
  d[156] = s[75];
  d[157] = s[76];
  d[158] = s[77];
  for (int k = 159, v = 72; k <= 230; k++, v++) d[k] = s[v];
  d[231] = s[138];
  d[232] = s[139];
  d[233] = s[140];
  d[234] = s[147];
  d[235] = s[148];
  d[236] = s[149];
  for (int k = 237, v = 144; k <= 308; k++, v++) d[k] = s[v];
  d[309] = s[210];
  d[310] = s[211];
  d[311] = s[212];
  d[312] = s[219];
  d[313] = s[220];
  d[314] = s[221];
  for (int k = 315, v = 216; k <= 386; k++, v++) d[k] = s[v];
  d[387] = s[282];
  d[388] = s[283];
  d[389] = s[284];
  d[390] = s[291];
  d[391] = s[292];
  d[392] = s[293];
  for (int k = 393, v = 288; k <= 464; k++, v++) d[k] = s[v];
  d[465] = s[354];
  d[466] = s[355];
  d[467] = s[356];
  d[468] = s[363];
  d[469] = s[364];
  d[470] = s[365];
  for (int k = 471, v = 360; k <= 542; k++, v++) d[k] = s[v];
  d[543] = s[426];
  d[544] = s[427];
  d[545] = s[428];
  d[546] = s[435];
  d[547] = s[436];
  d[548] = s[437];
  for (int k = 549, v = 432; k <= 620; k++, v++) d[k] = s[v];
  d[621] = s[498];
  d[622] = s[499];
  d[623] = s[500];
  d[624] = s[507];
  d[625] = s[508];
  d[626] = s[509];
  for (int k = 627, v = 504; k <= 698; k++, v++) d[k] = s[v];
  d[699] = s[570];
  d[700] = s[571];
  d[701] = s[572];
  d[702] = s[579];
  d[703] = s[580];
  d[704] = s[581];
  for (int k = 705, v = 576; k <= 776; k++, v++) d[k] = s[v];
  d[777] = s[642];
  d[778] = s[643];
  d[779] = s[644];
  d[780] = s[651];
  d[781] = s[652];
  d[782] = s[653];
  for (int k = 783, v = 648; k <= 854; k++, v++) d[k] = s[v];
  d[855] = s[714];
  d[856] = s[715];
  d[857] = s[716];
  d[858] = s[723];
  d[859] = s[724];
  d[860] = s[725];
  for (int k = 861, v = 720; k <= 932; k++, v++) d[k] = s[v];
  d[933] = s[786];
  d[934] = s[787];
  d[935] = s[788];
  d[936] = s[795];
  d[937] = s[796];
  d[938] = s[797];
  for (int k = 939, v = 792; k <= 1010; k++, v++) d[k] = s[v];
  d[1011] = s[858];
  d[1012] = s[859];
  d[1013] = s[860];
  d[1014] = s[867];
  d[1015] = s[868];
  d[1016] = s[869];
  for (int k = 1017, v = 864; k <= 1088; k++, v++) d[k] = s[v];
  d[1089] = s[930];
  d[1090] = s[931];
  d[1091] = s[932];
  d[1092] = s[939];
  d[1093] = s[940];
  d[1094] = s[941];
  for (int k = 1095, v = 936; k <= 1166; k++, v++) d[k] = s[v];
  d[1167] = s[1002];
  d[1168] = s[1003];
  d[1169] = s[1004];
  d[1170] = s[1011];
  d[1171] = s[1012];
  d[1172] = s[1013];
  for (int k = 1173, v = 1008; k <= 1244; k++, v++) d[k] = s[v];
  d[1245] = s[1074];
  d[1246] = s[1075];
  d[1247] = s[1076];
  d[1248] = s[1083];
  d[1249] = s[1084];
  d[1250] = s[1085];
  for (int k = 1251, v = 1080; k <= 1322; k++, v++) d[k] = s[v];
  d[1323] = s[1146];
  d[1324] = s[1147];
  d[1325] = s[1148];
  d[1326] = s[1155];
  d[1327] = s[1156];
  d[1328] = s[1157];
  for (int k = 1329, v = 1152; k <= 1400; k++, v++) d[k] = s[v];
  d[1401] = s[1218];
  d[1402] = s[1219];
  d[1403] = s[1220];
  d[1404] = s[1227];
  d[1405] = s[1228];
  d[1406] = s[1229];
  for (int k = 1407, v = 1224; k <= 1478; k++, v++) d[k] = s[v];
  d[1479] = s[1290];
  d[1480] = s[1291];
  d[1481] = s[1292];
  d[1482] = s[1299];
  d[1483] = s[1300];
  d[1484] = s[1301];
  for (int k = 1485, v = 1296; k <= 1556; k++, v++) d[k] = s[v];
  d[1557] = s[1362];
  d[1558] = s[1363];
  d[1559] = s[1364];
  d[1560] = s[1371];
  d[1561] = s[1372];
  d[1562] = s[1373];
  for (int k = 1563, v = 1368; k <= 1634; k++, v++) d[k] = s[v];
  d[1635] = s[1434];
  d[1636] = s[1435];
  d[1637] = s[1436];
  d[1638] = s[1443];
  d[1639] = s[1444];
  d[1640] = s[1445];
  for (int k = 1641, v = 1440; k <= 1712; k++, v++) d[k] = s[v];
  d[1713] = s[1506];
  d[1714] = s[1507];
  d[1715] = s[1508];
  d[1716] = s[1515];
  d[1717] = s[1516];
  d[1718] = s[1517];
  for (int k = 1719, v = 1512; k <= 1790; k++, v++) d[k] = s[v];
  d[1791] = s[1578];
  d[1792] = s[1579];
  d[1793] = s[1580];
  d[1794] = s[1587];
  d[1795] = s[1588];
  d[1796] = s[1589];
  for (int k = 1797, v = 1584; k <= 1868; k++, v++) d[k] = s[v];
  d[1869] = s[1650];
  d[1870] = s[1651];
  d[1871] = s[1652];
  d[1872] = s[1659];
  d[1873] = s[1660];
  d[1874] = s[1661];
  for (int k = 1875, v = 1656; k <= 1946; k++, v++) d[k] = s[v];
  d[1947] = s[1722];
  d[1948] = s[1723];
  d[1949] = s[1724];
  d[1950] = s[1587];
  d[1951] = s[1588];
  d[1952] = s[1589];
  for (int k = 1953, v = 1584; k <= 2024; k++, v++) d[k] = s[v];
  d[2025] = s[1650];
  d[2026] = s[1651];
  d[2027] = s[1652];
}

void _26x26_crop_to_24x24_copyMakeBorder_2_2_2_2_BORDER_REFLECT_101(
    __private const uchar* s,__private uchar* d) {
  d[0] = s[243];
  d[1] = s[244];
  d[2] = s[245];
  d[3] = s[240];
  d[4] = s[241];
  d[5] = s[242];
  for (int k = 6, v = 237; k <= 77; k++, v++) d[k] = s[v];
  d[78] = s[303];
  d[79] = s[304];
  d[80] = s[305];
  d[81] = s[300];
  d[82] = s[301];
  d[83] = s[302];
  d[84] = s[165];
  d[85] = s[166];
  d[86] = s[167];
  d[87] = s[162];
  d[88] = s[163];
  d[89] = s[164];
  for (int k = 90, v = 159; k <= 161; k++, v++) d[k] = s[v];
  d[162] = s[225];
  d[163] = s[226];
  d[164] = s[227];
  d[165] = s[222];
  d[166] = s[223];
  d[167] = s[224];
  d[168] = s[87];
  d[169] = s[88];
  d[170] = s[89];
  d[171] = s[84];
  d[172] = s[85];
  d[173] = s[86];
  for (int k = 174, v = 81; k <= 245; k++, v++) d[k] = s[v];
  d[246] = s[147];
  d[247] = s[148];
  d[248] = s[149];
  d[249] = s[144];
  d[250] = s[145];
  d[251] = s[146];
  d[252] = s[165];
  d[253] = s[166];
  d[254] = s[167];
  d[255] = s[162];
  d[256] = s[163];
  d[257] = s[164];
  for (int k = 258, v = 159; k <= 329; k++, v++) d[k] = s[v];
  d[330] = s[225];
  d[331] = s[226];
  d[332] = s[227];
  d[333] = s[222];
  d[334] = s[223];
  d[335] = s[224];
  d[336] = s[243];
  d[337] = s[244];
  d[338] = s[245];
  d[339] = s[240];
  d[340] = s[241];
  d[341] = s[242];
  for (int k = 342, v = 237; k <= 413; k++, v++) d[k] = s[v];
  d[414] = s[303];
  d[415] = s[304];
  d[416] = s[305];
  d[417] = s[300];
  d[418] = s[301];
  d[419] = s[302];
  d[420] = s[321];
  d[421] = s[322];
  d[422] = s[323];
  d[423] = s[318];
  d[424] = s[319];
  d[425] = s[320];
  for (int k = 426, v = 315; k <= 497; k++, v++) d[k] = s[v];
  d[498] = s[381];
  d[499] = s[382];
  d[500] = s[383];
  d[501] = s[378];
  d[502] = s[379];
  d[503] = s[380];
  d[504] = s[399];
  d[505] = s[400];
  d[506] = s[401];
  d[507] = s[396];
  d[508] = s[397];
  d[509] = s[398];
  for (int k = 510, v = 393; k <= 581; k++, v++) d[k] = s[v];
  d[582] = s[459];
  d[583] = s[460];
  d[584] = s[461];
  d[585] = s[456];
  d[586] = s[457];
  d[587] = s[458];
  d[588] = s[477];
  d[589] = s[478];
  d[590] = s[479];
  d[591] = s[474];
  d[592] = s[475];
  d[593] = s[476];
  for (int k = 594, v = 471; k <= 665; k++, v++) d[k] = s[v];
  d[666] = s[537];
  d[667] = s[538];
  d[668] = s[539];
  d[669] = s[534];
  d[670] = s[535];
  d[671] = s[536];
  d[672] = s[555];
  d[673] = s[556];
  d[674] = s[557];
  d[675] = s[552];
  d[676] = s[553];
  d[677] = s[554];
  for (int k = 678, v = 549; k <= 749; k++, v++) d[k] = s[v];
  d[750] = s[615];
  d[751] = s[616];
  d[752] = s[617];
  d[753] = s[612];
  d[754] = s[613];
  d[755] = s[614];
  d[756] = s[633];
  d[757] = s[634];
  d[758] = s[635];
  d[759] = s[630];
  d[760] = s[631];
  d[761] = s[632];
  for (int k = 762, v = 627; k <= 833; k++, v++) d[k] = s[v];
  d[834] = s[693];
  d[835] = s[694];
  d[836] = s[695];
  d[837] = s[690];
  d[838] = s[691];
  d[839] = s[692];
  d[840] = s[711];
  d[841] = s[712];
  d[842] = s[713];
  d[843] = s[708];
  d[844] = s[709];
  d[845] = s[710];
  for (int k = 846, v = 705; k <= 917; k++, v++) d[k] = s[v];
  d[918] = s[771];
  d[919] = s[772];
  d[920] = s[773];
  d[921] = s[768];
  d[922] = s[769];
  d[923] = s[770];
  d[924] = s[789];
  d[925] = s[790];
  d[926] = s[791];
  d[927] = s[786];
  d[928] = s[787];
  d[929] = s[788];
  for (int k = 930, v = 783; k <= 1001; k++, v++) d[k] = s[v];
  d[1002] = s[849];
  d[1003] = s[850];
  d[1004] = s[851];
  d[1005] = s[846];
  d[1006] = s[847];
  d[1007] = s[848];
  d[1008] = s[867];
  d[1009] = s[868];
  d[1010] = s[869];
  d[1011] = s[864];
  d[1012] = s[865];
  d[1013] = s[866];
  for (int k = 1014, v = 861; k <= 1085; k++, v++) d[k] = s[v];
  d[1086] = s[927];
  d[1087] = s[928];
  d[1088] = s[929];
  d[1089] = s[924];
  d[1090] = s[925];
  d[1091] = s[926];
  d[1092] = s[945];
  d[1093] = s[946];
  d[1094] = s[947];
  d[1095] = s[942];
  d[1096] = s[943];
  d[1097] = s[944];
  for (int k = 1098, v = 939; k <= 1169; k++, v++) d[k] = s[v];
  d[1170] = s[1005];
  d[1171] = s[1006];
  d[1172] = s[1007];
  d[1173] = s[1002];
  d[1174] = s[1003];
  d[1175] = s[1004];
  d[1176] = s[1023];
  d[1177] = s[1024];
  d[1178] = s[1025];
  d[1179] = s[1020];
  d[1180] = s[1021];
  d[1181] = s[1022];
  for (int k = 1182, v = 1017; k <= 1253; k++, v++) d[k] = s[v];
  d[1254] = s[1083];
  d[1255] = s[1084];
  d[1256] = s[1085];
  d[1257] = s[1080];
  d[1258] = s[1081];
  d[1259] = s[1082];
  d[1260] = s[1101];
  d[1261] = s[1102];
  d[1262] = s[1103];
  d[1263] = s[1098];
  d[1264] = s[1099];
  d[1265] = s[1100];
  for (int k = 1266, v = 1095; k <= 1337; k++, v++) d[k] = s[v];
  d[1338] = s[1161];
  d[1339] = s[1162];
  d[1340] = s[1163];
  d[1341] = s[1158];
  d[1342] = s[1159];
  d[1343] = s[1160];
  d[1344] = s[1179];
  d[1345] = s[1180];
  d[1346] = s[1181];
  d[1347] = s[1176];
  d[1348] = s[1177];
  d[1349] = s[1178];
  for (int k = 1350, v = 1173; k <= 1421; k++, v++) d[k] = s[v];
  d[1422] = s[1239];
  d[1423] = s[1240];
  d[1424] = s[1241];
  d[1425] = s[1236];
  d[1426] = s[1237];
  d[1427] = s[1238];
  d[1428] = s[1257];
  d[1429] = s[1258];
  d[1430] = s[1259];
  d[1431] = s[1254];
  d[1432] = s[1255];
  d[1433] = s[1256];
  for (int k = 1434, v = 1251; k <= 1505; k++, v++) d[k] = s[v];
  d[1506] = s[1317];
  d[1507] = s[1318];
  d[1508] = s[1319];
  d[1509] = s[1314];
  d[1510] = s[1315];
  d[1511] = s[1316];
  d[1512] = s[1335];
  d[1513] = s[1336];
  d[1514] = s[1337];
  d[1515] = s[1332];
  d[1516] = s[1333];
  d[1517] = s[1334];
  for (int k = 1518, v = 1329; k <= 1589; k++, v++) d[k] = s[v];
  d[1590] = s[1395];
  d[1591] = s[1396];
  d[1592] = s[1397];
  d[1593] = s[1392];
  d[1594] = s[1393];
  d[1595] = s[1394];
  d[1596] = s[1413];
  d[1597] = s[1414];
  d[1598] = s[1415];
  d[1599] = s[1410];
  d[1600] = s[1411];
  d[1601] = s[1412];
  for (int k = 1602, v = 1407; k <= 1673; k++, v++) d[k] = s[v];
  d[1674] = s[1473];
  d[1675] = s[1474];
  d[1676] = s[1475];
  d[1677] = s[1470];
  d[1678] = s[1471];
  d[1679] = s[1472];
  d[1680] = s[1491];
  d[1681] = s[1492];
  d[1682] = s[1493];
  d[1683] = s[1488];
  d[1684] = s[1489];
  d[1685] = s[1490];
  for (int k = 1686, v = 1485; k <= 1757; k++, v++) d[k] = s[v];
  d[1758] = s[1551];
  d[1759] = s[1552];
  d[1760] = s[1553];
  d[1761] = s[1548];
  d[1762] = s[1549];
  d[1763] = s[1550];
  d[1764] = s[1569];
  d[1765] = s[1570];
  d[1766] = s[1571];
  d[1767] = s[1566];
  d[1768] = s[1567];
  d[1769] = s[1568];
  for (int k = 1770, v = 1563; k <= 1841; k++, v++) d[k] = s[v];
  d[1842] = s[1629];
  d[1843] = s[1630];
  d[1844] = s[1631];
  d[1845] = s[1626];
  d[1846] = s[1627];
  d[1847] = s[1628];
  d[1848] = s[1647];
  d[1849] = s[1648];
  d[1850] = s[1649];
  d[1851] = s[1644];
  d[1852] = s[1645];
  d[1853] = s[1646];
  for (int k = 1854, v = 1641; k <= 1925; k++, v++) d[k] = s[v];
  d[1926] = s[1707];
  d[1927] = s[1708];
  d[1928] = s[1709];
  d[1929] = s[1704];
  d[1930] = s[1705];
  d[1931] = s[1706];
  d[1932] = s[1725];
  d[1933] = s[1726];
  d[1934] = s[1727];
  d[1935] = s[1722];
  d[1936] = s[1723];
  d[1937] = s[1724];
  for (int k = 1938, v = 1719; k <= 2009; k++, v++) d[k] = s[v];
  d[2010] = s[1785];
  d[2011] = s[1786];
  d[2012] = s[1787];
  d[2013] = s[1782];
  d[2014] = s[1783];
  d[2015] = s[1784];
  d[2016] = s[1803];
  d[2017] = s[1804];
  d[2018] = s[1805];
  d[2019] = s[1800];
  d[2020] = s[1801];
  d[2021] = s[1802];
  for (int k = 2022, v = 1797; k <= 2093; k++, v++) d[k] = s[v];
  d[2094] = s[1863];
  d[2095] = s[1864];
  d[2096] = s[1865];
  d[2097] = s[1860];
  d[2098] = s[1861];
  d[2099] = s[1862];
  d[2100] = s[1881];
  d[2101] = s[1882];
  d[2102] = s[1883];
  d[2103] = s[1878];
  d[2104] = s[1879];
  d[2105] = s[1880];
  for (int k = 2106, v = 1875; k <= 2177; k++, v++) d[k] = s[v];
  d[2178] = s[1941];
  d[2179] = s[1942];
  d[2180] = s[1943];
  d[2181] = s[1938];
  d[2182] = s[1939];
  d[2183] = s[1940];
  d[2184] = s[1803];
  d[2185] = s[1804];
  d[2186] = s[1805];
  d[2187] = s[1800];
  d[2188] = s[1801];
  d[2189] = s[1802];
  for (int k = 2190, v = 1797; k <= 2261; k++, v++) d[k] = s[v];
  d[2262] = s[1863];
  d[2263] = s[1864];
  d[2264] = s[1865];
  d[2265] = s[1860];
  d[2266] = s[1861];
  d[2267] = s[1862];
  d[2268] = s[1725];
  d[2269] = s[1726];
  d[2270] = s[1727];
  d[2271] = s[1722];
  d[2272] = s[1723];
  d[2273] = s[1724];
  for (int k = 2274, v = 1719; k <= 2345; k++, v++) d[k] = s[v];
  d[2346] = s[1785];
  d[2347] = s[1786];
  d[2348] = s[1787];
  d[2349] = s[1782];
  d[2350] = s[1783];
  d[2351] = s[1784];
}

void _28x28_crop_to__24x24_copyMakeBorder_0_0_2_2_BORDER_REPLICATE_BORDER_ISOLATED(
    __private const uchar* s,__private uchar* d) {
  d[0] = s[174];
  d[1] = s[175];
  d[2] = s[176];
  d[3] = s[174];
  d[4] = s[175];
  d[5] = s[176];
  for (int k = 6, v = 174; k <= 77; k++, v++) d[k] = s[v];
  d[78] = s[243];
  d[79] = s[244];
  d[80] = s[245];
  d[81] = s[243];
  d[82] = s[244];
  d[83] = s[245];
  d[84] = s[258];
  d[85] = s[259];
  d[86] = s[260];
  d[87] = s[258];
  d[88] = s[259];
  d[89] = s[260];
  for (int k = 90, v = 258; k <= 161; k++, v++) d[k] = s[v];
  d[162] = s[327];
  d[163] = s[328];
  d[164] = s[329];
  d[165] = s[327];
  d[166] = s[328];
  d[167] = s[329];
  d[168] = s[342];
  d[169] = s[343];
  d[170] = s[344];
  d[171] = s[342];
  d[172] = s[343];
  d[173] = s[344];
  for (int k = 174, v = 342; k <= 245; k++, v++) d[k] = s[v];
  d[246] = s[411];
  d[247] = s[412];
  d[248] = s[413];
  d[249] = s[411];
  d[250] = s[412];
  d[251] = s[413];
  d[252] = s[426];
  d[253] = s[427];
  d[254] = s[428];
  d[255] = s[426];
  d[256] = s[427];
  d[257] = s[428];
  for (int k = 258, v = 426; k <= 329; k++, v++) d[k] = s[v];
  d[330] = s[495];
  d[331] = s[496];
  d[332] = s[497];
  d[333] = s[495];
  d[334] = s[496];
  d[335] = s[497];
  d[336] = s[510];
  d[337] = s[511];
  d[338] = s[512];
  d[339] = s[510];
  d[340] = s[511];
  d[341] = s[512];
  for (int k = 342, v = 510; k <= 413; k++, v++) d[k] = s[v];
  d[414] = s[579];
  d[415] = s[580];
  d[416] = s[581];
  d[417] = s[579];
  d[418] = s[580];
  d[419] = s[581];
  d[420] = s[594];
  d[421] = s[595];
  d[422] = s[596];
  d[423] = s[594];
  d[424] = s[595];
  d[425] = s[596];
  for (int k = 426, v = 594; k <= 497; k++, v++) d[k] = s[v];
  d[498] = s[663];
  d[499] = s[664];
  d[500] = s[665];
  d[501] = s[663];
  d[502] = s[664];
  d[503] = s[665];
  d[504] = s[678];
  d[505] = s[679];
  d[506] = s[680];
  d[507] = s[678];
  d[508] = s[679];
  d[509] = s[680];
  for (int k = 510, v = 678; k <= 581; k++, v++) d[k] = s[v];
  d[582] = s[747];
  d[583] = s[748];
  d[584] = s[749];
  d[585] = s[747];
  d[586] = s[748];
  d[587] = s[749];
  d[588] = s[762];
  d[589] = s[763];
  d[590] = s[764];
  d[591] = s[762];
  d[592] = s[763];
  d[593] = s[764];
  for (int k = 594, v = 762; k <= 665; k++, v++) d[k] = s[v];
  d[666] = s[831];
  d[667] = s[832];
  d[668] = s[833];
  d[669] = s[831];
  d[670] = s[832];
  d[671] = s[833];
  d[672] = s[846];
  d[673] = s[847];
  d[674] = s[848];
  d[675] = s[846];
  d[676] = s[847];
  d[677] = s[848];
  for (int k = 678, v = 846; k <= 749; k++, v++) d[k] = s[v];
  d[750] = s[915];
  d[751] = s[916];
  d[752] = s[917];
  d[753] = s[915];
  d[754] = s[916];
  d[755] = s[917];
  d[756] = s[930];
  d[757] = s[931];
  d[758] = s[932];
  d[759] = s[930];
  d[760] = s[931];
  d[761] = s[932];
  for (int k = 762, v = 930; k <= 833; k++, v++) d[k] = s[v];
  d[834] = s[999];
  d[835] = s[1000];
  d[836] = s[1001];
  d[837] = s[999];
  d[838] = s[1000];
  d[839] = s[1001];
  d[840] = s[1014];
  d[841] = s[1015];
  d[842] = s[1016];
  d[843] = s[1014];
  d[844] = s[1015];
  d[845] = s[1016];
  for (int k = 846, v = 1014; k <= 917; k++, v++) d[k] = s[v];
  d[918] = s[1083];
  d[919] = s[1084];
  d[920] = s[1085];
  d[921] = s[1083];
  d[922] = s[1084];
  d[923] = s[1085];
  d[924] = s[1098];
  d[925] = s[1099];
  d[926] = s[1100];
  d[927] = s[1098];
  d[928] = s[1099];
  d[929] = s[1100];
  for (int k = 930, v = 1098; k <= 1001; k++, v++) d[k] = s[v];
  d[1002] = s[1167];
  d[1003] = s[1168];
  d[1004] = s[1169];
  d[1005] = s[1167];
  d[1006] = s[1168];
  d[1007] = s[1169];
  d[1008] = s[1182];
  d[1009] = s[1183];
  d[1010] = s[1184];
  d[1011] = s[1182];
  d[1012] = s[1183];
  d[1013] = s[1184];
  for (int k = 1014, v = 1182; k <= 1085; k++, v++) d[k] = s[v];
  d[1086] = s[1251];
  d[1087] = s[1252];
  d[1088] = s[1253];
  d[1089] = s[1251];
  d[1090] = s[1252];
  d[1091] = s[1253];
  d[1092] = s[1266];
  d[1093] = s[1267];
  d[1094] = s[1268];
  d[1095] = s[1266];
  d[1096] = s[1267];
  d[1097] = s[1268];
  for (int k = 1098, v = 1266; k <= 1169; k++, v++) d[k] = s[v];
  d[1170] = s[1335];
  d[1171] = s[1336];
  d[1172] = s[1337];
  d[1173] = s[1335];
  d[1174] = s[1336];
  d[1175] = s[1337];
  d[1176] = s[1350];
  d[1177] = s[1351];
  d[1178] = s[1352];
  d[1179] = s[1350];
  d[1180] = s[1351];
  d[1181] = s[1352];
  for (int k = 1182, v = 1350; k <= 1253; k++, v++) d[k] = s[v];
  d[1254] = s[1419];
  d[1255] = s[1420];
  d[1256] = s[1421];
  d[1257] = s[1419];
  d[1258] = s[1420];
  d[1259] = s[1421];
  d[1260] = s[1434];
  d[1261] = s[1435];
  d[1262] = s[1436];
  d[1263] = s[1434];
  d[1264] = s[1435];
  d[1265] = s[1436];
  for (int k = 1266, v = 1434; k <= 1337; k++, v++) d[k] = s[v];
  d[1338] = s[1503];
  d[1339] = s[1504];
  d[1340] = s[1505];
  d[1341] = s[1503];
  d[1342] = s[1504];
  d[1343] = s[1505];
  d[1344] = s[1518];
  d[1345] = s[1519];
  d[1346] = s[1520];
  d[1347] = s[1518];
  d[1348] = s[1519];
  d[1349] = s[1520];
  for (int k = 1350, v = 1518; k <= 1421; k++, v++) d[k] = s[v];
  d[1422] = s[1587];
  d[1423] = s[1588];
  d[1424] = s[1589];
  d[1425] = s[1587];
  d[1426] = s[1588];
  d[1427] = s[1589];
  d[1428] = s[1602];
  d[1429] = s[1603];
  d[1430] = s[1604];
  d[1431] = s[1602];
  d[1432] = s[1603];
  d[1433] = s[1604];
  for (int k = 1434, v = 1602; k <= 1505; k++, v++) d[k] = s[v];
  d[1506] = s[1671];
  d[1507] = s[1672];
  d[1508] = s[1673];
  d[1509] = s[1671];
  d[1510] = s[1672];
  d[1511] = s[1673];
  d[1512] = s[1686];
  d[1513] = s[1687];
  d[1514] = s[1688];
  d[1515] = s[1686];
  d[1516] = s[1687];
  d[1517] = s[1688];
  for (int k = 1518, v = 1686; k <= 1589; k++, v++) d[k] = s[v];
  d[1590] = s[1755];
  d[1591] = s[1756];
  d[1592] = s[1757];
  d[1593] = s[1755];
  d[1594] = s[1756];
  d[1595] = s[1757];
  d[1596] = s[1770];
  d[1597] = s[1771];
  d[1598] = s[1772];
  d[1599] = s[1770];
  d[1600] = s[1771];
  d[1601] = s[1772];
  for (int k = 1602, v = 1770; k <= 1673; k++, v++) d[k] = s[v];
  d[1674] = s[1839];
  d[1675] = s[1840];
  d[1676] = s[1841];
  d[1677] = s[1839];
  d[1678] = s[1840];
  d[1679] = s[1841];
  d[1680] = s[1854];
  d[1681] = s[1855];
  d[1682] = s[1856];
  d[1683] = s[1854];
  d[1684] = s[1855];
  d[1685] = s[1856];
  for (int k = 1686, v = 1854; k <= 1757; k++, v++) d[k] = s[v];
  d[1758] = s[1923];
  d[1759] = s[1924];
  d[1760] = s[1925];
  d[1761] = s[1923];
  d[1762] = s[1924];
  d[1763] = s[1925];
  d[1764] = s[1938];
  d[1765] = s[1939];
  d[1766] = s[1940];
  d[1767] = s[1938];
  d[1768] = s[1939];
  d[1769] = s[1940];
  for (int k = 1770, v = 1938; k <= 1841; k++, v++) d[k] = s[v];
  d[1842] = s[2007];
  d[1843] = s[2008];
  d[1844] = s[2009];
  d[1845] = s[2007];
  d[1846] = s[2008];
  d[1847] = s[2009];
  d[1848] = s[2022];
  d[1849] = s[2023];
  d[1850] = s[2024];
  d[1851] = s[2022];
  d[1852] = s[2023];
  d[1853] = s[2024];
  for (int k = 1854, v = 2022; k <= 1925; k++, v++) d[k] = s[v];
  d[1926] = s[2091];
  d[1927] = s[2092];
  d[1928] = s[2093];
  d[1929] = s[2091];
  d[1930] = s[2092];
  d[1931] = s[2093];
  d[1932] = s[2106];
  d[1933] = s[2107];
  d[1934] = s[2108];
  d[1935] = s[2106];
  d[1936] = s[2107];
  d[1937] = s[2108];
  for (int k = 1938, v = 2106; k <= 2009; k++, v++) d[k] = s[v];
  d[2010] = s[2175];
  d[2011] = s[2176];
  d[2012] = s[2177];
  d[2013] = s[2175];
  d[2014] = s[2176];
  d[2015] = s[2177];
}

void set_nonce_bytes_0(__local const uchar* R,__private uchar* d,__private uchar l) {
  for (int i = 0, k = 819; i < 72; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 72, k = 933; i < 144; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 144, k = 1047; i < 216; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 216, k = 1161; i < 288; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 288, k = 1275; i < 360; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 360, k = 1389; i < 432; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 432, k = 1503; i < 504; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 504, k = 1617; i < 576; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 576, k = 1731; i < 648; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 648, k = 1845; i < 720; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 720, k = 1959; i < 792; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 792, k = 2073; i < 864; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 864, k = 2187; i < 936; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 936, k = 2301; i < 1008; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1008, k = 2415; i < 1080; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1080, k = 2529; i < 1152; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1152, k = 2643; i < 1224; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1224, k = 2757; i < 1296; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1296, k = 2871; i < 1368; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1368, k = 2985; i < 1440; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1440, k = 3099; i < 1512; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1512, k = 3213; i < 1584; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1584, k = 3327; i < 1656; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1656, k = 3441; i < 1728; i += 4, k += 4) d[k] = R[i] ^ l;
  d[817] = d[823];
  d[815] = d[827];
  d[807] = d[831];
  d[805] = d[835];
  d[803] = d[839];
  d[909] = d[867];
  d[907] = d[871];
  d[905] = d[875];
  d[897] = d[879];
  d[895] = d[883];
  d[893] = d[887];
  d[705] = d[933];
  d[703] = d[937];
  d[709] = d[937];
  d[931] = d[937];
  d[701] = d[941];
  d[713] = d[941];
  d[929] = d[941];
  d[693] = d[945];
  d[717] = d[945];
  d[921] = d[945];
  d[691] = d[949];
  d[721] = d[949];
  d[919] = d[949];
  d[689] = d[953];
  d[725] = d[953];
  d[917] = d[953];
  d[729] = d[957];
  d[733] = d[961];
  d[737] = d[965];
  d[741] = d[969];
  d[745] = d[973];
  d[749] = d[977];
  d[753] = d[981];
  d[795] = d[981];
  d[1023] = d[981];
  d[757] = d[985];
  d[793] = d[985];
  d[1021] = d[985];
  d[761] = d[989];
  d[791] = d[989];
  d[1019] = d[989];
  d[765] = d[993];
  d[783] = d[993];
  d[1011] = d[993];
  d[769] = d[997];
  d[781] = d[997];
  d[1009] = d[997];
  d[773] = d[1001];
  d[779] = d[1001];
  d[1007] = d[1001];
  d[591] = d[1047];
  d[589] = d[1051];
  d[595] = d[1051];
  d[1045] = d[1051];
  d[587] = d[1055];
  d[599] = d[1055];
  d[1043] = d[1055];
  d[579] = d[1059];
  d[603] = d[1059];
  d[1035] = d[1059];
  d[577] = d[1063];
  d[607] = d[1063];
  d[1033] = d[1063];
  d[575] = d[1067];
  d[611] = d[1067];
  d[1031] = d[1067];
  d[615] = d[1071];
  d[619] = d[1075];
  d[623] = d[1079];
  d[627] = d[1083];
  d[631] = d[1087];
  d[635] = d[1091];
  d[639] = d[1095];
  d[681] = d[1095];
  d[1137] = d[1095];
  d[643] = d[1099];
  d[679] = d[1099];
  d[1135] = d[1099];
  d[647] = d[1103];
  d[677] = d[1103];
  d[1133] = d[1103];
  d[651] = d[1107];
  d[669] = d[1107];
  d[1125] = d[1107];
  d[655] = d[1111];
  d[667] = d[1111];
  d[1123] = d[1111];
  d[659] = d[1115];
  d[665] = d[1115];
  d[1121] = d[1115];
  d[477] = d[1161];
  d[475] = d[1165];
  d[481] = d[1165];
  d[1159] = d[1165];
  d[473] = d[1169];
  d[485] = d[1169];
  d[1157] = d[1169];
  d[465] = d[1173];
  d[489] = d[1173];
  d[1149] = d[1173];
  d[463] = d[1177];
  d[493] = d[1177];
  d[1147] = d[1177];
  d[461] = d[1181];
  d[497] = d[1181];
  d[1145] = d[1181];
  d[501] = d[1185];
  d[505] = d[1189];
  d[509] = d[1193];
  d[513] = d[1197];
  d[517] = d[1201];
  d[521] = d[1205];
  d[525] = d[1209];
  d[567] = d[1209];
  d[1251] = d[1209];
  d[529] = d[1213];
  d[565] = d[1213];
  d[1249] = d[1213];
  d[533] = d[1217];
  d[563] = d[1217];
  d[1247] = d[1217];
  d[537] = d[1221];
  d[555] = d[1221];
  d[1239] = d[1221];
  d[541] = d[1225];
  d[553] = d[1225];
  d[1237] = d[1225];
  d[545] = d[1229];
  d[551] = d[1229];
  d[1235] = d[1229];
  d[363] = d[1275];
  d[361] = d[1279];
  d[367] = d[1279];
  d[1273] = d[1279];
  d[359] = d[1283];
  d[371] = d[1283];
  d[1271] = d[1283];
  d[351] = d[1287];
  d[375] = d[1287];
  d[1263] = d[1287];
  d[349] = d[1291];
  d[379] = d[1291];
  d[1261] = d[1291];
  d[347] = d[1295];
  d[383] = d[1295];
  d[1259] = d[1295];
  d[387] = d[1299];
  d[391] = d[1303];
  d[395] = d[1307];
  d[399] = d[1311];
  d[403] = d[1315];
  d[407] = d[1319];
  d[411] = d[1323];
  d[453] = d[1323];
  d[1365] = d[1323];
  d[415] = d[1327];
  d[451] = d[1327];
  d[1363] = d[1327];
  d[419] = d[1331];
  d[449] = d[1331];
  d[1361] = d[1331];
  d[423] = d[1335];
  d[441] = d[1335];
  d[1353] = d[1335];
  d[427] = d[1339];
  d[439] = d[1339];
  d[1351] = d[1339];
  d[431] = d[1343];
  d[437] = d[1343];
  d[1349] = d[1343];
  d[249] = d[1389];
  d[247] = d[1393];
  d[253] = d[1393];
  d[1387] = d[1393];
  d[245] = d[1397];
  d[257] = d[1397];
  d[1385] = d[1397];
  d[237] = d[1401];
  d[261] = d[1401];
  d[1377] = d[1401];
  d[235] = d[1405];
  d[265] = d[1405];
  d[1375] = d[1405];
  d[233] = d[1409];
  d[269] = d[1409];
  d[1373] = d[1409];
  d[273] = d[1413];
  d[277] = d[1417];
  d[281] = d[1421];
  d[285] = d[1425];
  d[289] = d[1429];
  d[293] = d[1433];
  d[297] = d[1437];
  d[339] = d[1437];
  d[1479] = d[1437];
  d[301] = d[1441];
  d[337] = d[1441];
  d[1477] = d[1441];
  d[305] = d[1445];
  d[335] = d[1445];
  d[1475] = d[1445];
  d[309] = d[1449];
  d[327] = d[1449];
  d[1467] = d[1449];
  d[313] = d[1453];
  d[325] = d[1453];
  d[1465] = d[1453];
  d[317] = d[1457];
  d[323] = d[1457];
  d[1463] = d[1457];
  d[135] = d[1503];
  d[133] = d[1507];
  d[139] = d[1507];
  d[1501] = d[1507];
  d[131] = d[1511];
  d[143] = d[1511];
  d[1499] = d[1511];
  d[123] = d[1515];
  d[147] = d[1515];
  d[1491] = d[1515];
  d[121] = d[1519];
  d[151] = d[1519];
  d[1489] = d[1519];
  d[119] = d[1523];
  d[155] = d[1523];
  d[1487] = d[1523];
  d[159] = d[1527];
  d[163] = d[1531];
  d[167] = d[1535];
  d[171] = d[1539];
  d[175] = d[1543];
  d[179] = d[1547];
  d[183] = d[1551];
  d[225] = d[1551];
  d[1593] = d[1551];
  d[187] = d[1555];
  d[223] = d[1555];
  d[1591] = d[1555];
  d[191] = d[1559];
  d[221] = d[1559];
  d[1589] = d[1559];
  d[195] = d[1563];
  d[213] = d[1563];
  d[1581] = d[1563];
  d[199] = d[1567];
  d[211] = d[1567];
  d[1579] = d[1567];
  d[203] = d[1571];
  d[209] = d[1571];
  d[1577] = d[1571];
  d[21] = d[1617];
  d[19] = d[1621];
  d[25] = d[1621];
  d[1615] = d[1621];
  d[17] = d[1625];
  d[29] = d[1625];
  d[1613] = d[1625];
  d[9] = d[1629];
  d[33] = d[1629];
  d[1605] = d[1629];
  d[7] = d[1633];
  d[37] = d[1633];
  d[1603] = d[1633];
  d[5] = d[1637];
  d[41] = d[1637];
  d[1601] = d[1637];
  d[45] = d[1641];
  d[49] = d[1645];
  d[53] = d[1649];
  d[57] = d[1653];
  d[61] = d[1657];
  d[65] = d[1661];
  d[69] = d[1665];
  d[111] = d[1665];
  d[1707] = d[1665];
  d[73] = d[1669];
  d[109] = d[1669];
  d[1705] = d[1669];
  d[77] = d[1673];
  d[107] = d[1673];
  d[1703] = d[1673];
  d[81] = d[1677];
  d[99] = d[1677];
  d[1695] = d[1677];
  d[85] = d[1681];
  d[97] = d[1681];
  d[1693] = d[1681];
  d[89] = d[1685];
  d[95] = d[1685];
  d[1691] = d[1685];
  d[1729] = d[1735];
  d[1727] = d[1739];
  d[1719] = d[1743];
  d[1717] = d[1747];
  d[1715] = d[1751];
  d[1821] = d[1779];
  d[1819] = d[1783];
  d[1817] = d[1787];
  d[1809] = d[1791];
  d[1807] = d[1795];
  d[1805] = d[1799];
  d[1843] = d[1849];
  d[1841] = d[1853];
  d[1833] = d[1857];
  d[1831] = d[1861];
  d[1829] = d[1865];
  d[1935] = d[1893];
  d[1933] = d[1897];
  d[1931] = d[1901];
  d[1923] = d[1905];
  d[1921] = d[1909];
  d[1919] = d[1913];
  d[1957] = d[1963];
  d[1955] = d[1967];
  d[1947] = d[1971];
  d[1945] = d[1975];
  d[1943] = d[1979];
  d[2049] = d[2007];
  d[2047] = d[2011];
  d[2045] = d[2015];
  d[2037] = d[2019];
  d[2035] = d[2023];
  d[2033] = d[2027];
  d[2071] = d[2077];
  d[2069] = d[2081];
  d[2061] = d[2085];
  d[2059] = d[2089];
  d[2057] = d[2093];
  d[2163] = d[2121];
  d[2161] = d[2125];
  d[2159] = d[2129];
  d[2151] = d[2133];
  d[2149] = d[2137];
  d[2147] = d[2141];
  d[2185] = d[2191];
  d[2183] = d[2195];
  d[2175] = d[2199];
  d[2173] = d[2203];
  d[2171] = d[2207];
  d[2277] = d[2235];
  d[2275] = d[2239];
  d[2273] = d[2243];
  d[2265] = d[2247];
  d[2263] = d[2251];
  d[2261] = d[2255];
  d[2299] = d[2305];
  d[2297] = d[2309];
  d[2289] = d[2313];
  d[2287] = d[2317];
  d[2285] = d[2321];
  d[2391] = d[2349];
  d[2389] = d[2353];
  d[2387] = d[2357];
  d[2379] = d[2361];
  d[2377] = d[2365];
  d[2375] = d[2369];
  d[2413] = d[2419];
  d[2411] = d[2423];
  d[2403] = d[2427];
  d[2401] = d[2431];
  d[2399] = d[2435];
  d[2505] = d[2463];
  d[2503] = d[2467];
  d[2501] = d[2471];
  d[2493] = d[2475];
  d[2491] = d[2479];
  d[2489] = d[2483];
  d[2527] = d[2533];
  d[2525] = d[2537];
  d[2517] = d[2541];
  d[2515] = d[2545];
  d[2513] = d[2549];
  d[2619] = d[2577];
  d[2617] = d[2581];
  d[2615] = d[2585];
  d[2607] = d[2589];
  d[2605] = d[2593];
  d[2603] = d[2597];
  d[4239] = d[2643];
  d[2641] = d[2647];
  d[4237] = d[2647];
  d[4243] = d[2647];
  d[2639] = d[2651];
  d[4235] = d[2651];
  d[4247] = d[2651];
  d[2631] = d[2655];
  d[4227] = d[2655];
  d[4251] = d[2655];
  d[2629] = d[2659];
  d[4225] = d[2659];
  d[4255] = d[2659];
  d[2627] = d[2663];
  d[4223] = d[2663];
  d[4259] = d[2663];
  d[4263] = d[2667];
  d[4267] = d[2671];
  d[4271] = d[2675];
  d[4275] = d[2679];
  d[4279] = d[2683];
  d[4283] = d[2687];
  d[2733] = d[2691];
  d[4287] = d[2691];
  d[4329] = d[2691];
  d[2731] = d[2695];
  d[4291] = d[2695];
  d[4327] = d[2695];
  d[2729] = d[2699];
  d[4295] = d[2699];
  d[4325] = d[2699];
  d[2721] = d[2703];
  d[4299] = d[2703];
  d[4317] = d[2703];
  d[2719] = d[2707];
  d[4303] = d[2707];
  d[4315] = d[2707];
  d[2717] = d[2711];
  d[4307] = d[2711];
  d[4313] = d[2711];
  d[4125] = d[2757];
  d[2755] = d[2761];
  d[4123] = d[2761];
  d[4129] = d[2761];
  d[2753] = d[2765];
  d[4121] = d[2765];
  d[4133] = d[2765];
  d[2745] = d[2769];
  d[4113] = d[2769];
  d[4137] = d[2769];
  d[2743] = d[2773];
  d[4111] = d[2773];
  d[4141] = d[2773];
  d[2741] = d[2777];
  d[4109] = d[2777];
  d[4145] = d[2777];
  d[4149] = d[2781];
  d[4153] = d[2785];
  d[4157] = d[2789];
  d[4161] = d[2793];
  d[4165] = d[2797];
  d[4169] = d[2801];
  d[2847] = d[2805];
  d[4173] = d[2805];
  d[4215] = d[2805];
  d[2845] = d[2809];
  d[4177] = d[2809];
  d[4213] = d[2809];
  d[2843] = d[2813];
  d[4181] = d[2813];
  d[4211] = d[2813];
  d[2835] = d[2817];
  d[4185] = d[2817];
  d[4203] = d[2817];
  d[2833] = d[2821];
  d[4189] = d[2821];
  d[4201] = d[2821];
  d[2831] = d[2825];
  d[4193] = d[2825];
  d[4199] = d[2825];
  d[4011] = d[2871];
  d[2869] = d[2875];
  d[4009] = d[2875];
  d[4015] = d[2875];
  d[2867] = d[2879];
  d[4007] = d[2879];
  d[4019] = d[2879];
  d[2859] = d[2883];
  d[3999] = d[2883];
  d[4023] = d[2883];
  d[2857] = d[2887];
  d[3997] = d[2887];
  d[4027] = d[2887];
  d[2855] = d[2891];
  d[3995] = d[2891];
  d[4031] = d[2891];
  d[4035] = d[2895];
  d[4039] = d[2899];
  d[4043] = d[2903];
  d[4047] = d[2907];
  d[4051] = d[2911];
  d[4055] = d[2915];
  d[2961] = d[2919];
  d[4059] = d[2919];
  d[4101] = d[2919];
  d[2959] = d[2923];
  d[4063] = d[2923];
  d[4099] = d[2923];
  d[2957] = d[2927];
  d[4067] = d[2927];
  d[4097] = d[2927];
  d[2949] = d[2931];
  d[4071] = d[2931];
  d[4089] = d[2931];
  d[2947] = d[2935];
  d[4075] = d[2935];
  d[4087] = d[2935];
  d[2945] = d[2939];
  d[4079] = d[2939];
  d[4085] = d[2939];
  d[3897] = d[2985];
  d[2983] = d[2989];
  d[3895] = d[2989];
  d[3901] = d[2989];
  d[2981] = d[2993];
  d[3893] = d[2993];
  d[3905] = d[2993];
  d[2973] = d[2997];
  d[3885] = d[2997];
  d[3909] = d[2997];
  d[2971] = d[3001];
  d[3883] = d[3001];
  d[3913] = d[3001];
  d[2969] = d[3005];
  d[3881] = d[3005];
  d[3917] = d[3005];
  d[3921] = d[3009];
  d[3925] = d[3013];
  d[3929] = d[3017];
  d[3933] = d[3021];
  d[3937] = d[3025];
  d[3941] = d[3029];
  d[3075] = d[3033];
  d[3945] = d[3033];
  d[3987] = d[3033];
  d[3073] = d[3037];
  d[3949] = d[3037];
  d[3985] = d[3037];
  d[3071] = d[3041];
  d[3953] = d[3041];
  d[3983] = d[3041];
  d[3063] = d[3045];
  d[3957] = d[3045];
  d[3975] = d[3045];
  d[3061] = d[3049];
  d[3961] = d[3049];
  d[3973] = d[3049];
  d[3059] = d[3053];
  d[3965] = d[3053];
  d[3971] = d[3053];
  d[3783] = d[3099];
  d[3097] = d[3103];
  d[3781] = d[3103];
  d[3787] = d[3103];
  d[3095] = d[3107];
  d[3779] = d[3107];
  d[3791] = d[3107];
  d[3087] = d[3111];
  d[3771] = d[3111];
  d[3795] = d[3111];
  d[3085] = d[3115];
  d[3769] = d[3115];
  d[3799] = d[3115];
  d[3083] = d[3119];
  d[3767] = d[3119];
  d[3803] = d[3119];
  d[3807] = d[3123];
  d[3811] = d[3127];
  d[3815] = d[3131];
  d[3819] = d[3135];
  d[3823] = d[3139];
  d[3827] = d[3143];
  d[3189] = d[3147];
  d[3831] = d[3147];
  d[3873] = d[3147];
  d[3187] = d[3151];
  d[3835] = d[3151];
  d[3871] = d[3151];
  d[3185] = d[3155];
  d[3839] = d[3155];
  d[3869] = d[3155];
  d[3177] = d[3159];
  d[3843] = d[3159];
  d[3861] = d[3159];
  d[3175] = d[3163];
  d[3847] = d[3163];
  d[3859] = d[3163];
  d[3173] = d[3167];
  d[3851] = d[3167];
  d[3857] = d[3167];
  d[3669] = d[3213];
  d[3211] = d[3217];
  d[3667] = d[3217];
  d[3673] = d[3217];
  d[3209] = d[3221];
  d[3665] = d[3221];
  d[3677] = d[3221];
  d[3201] = d[3225];
  d[3657] = d[3225];
  d[3681] = d[3225];
  d[3199] = d[3229];
  d[3655] = d[3229];
  d[3685] = d[3229];
  d[3197] = d[3233];
  d[3653] = d[3233];
  d[3689] = d[3233];
  d[3693] = d[3237];
  d[3697] = d[3241];
  d[3701] = d[3245];
  d[3705] = d[3249];
  d[3709] = d[3253];
  d[3713] = d[3257];
  d[3303] = d[3261];
  d[3717] = d[3261];
  d[3759] = d[3261];
  d[3301] = d[3265];
  d[3721] = d[3265];
  d[3757] = d[3265];
  d[3299] = d[3269];
  d[3725] = d[3269];
  d[3755] = d[3269];
  d[3291] = d[3273];
  d[3729] = d[3273];
  d[3747] = d[3273];
  d[3289] = d[3277];
  d[3733] = d[3277];
  d[3745] = d[3277];
  d[3287] = d[3281];
  d[3737] = d[3281];
  d[3743] = d[3281];
  d[3555] = d[3327];
  d[3325] = d[3331];
  d[3553] = d[3331];
  d[3559] = d[3331];
  d[3323] = d[3335];
  d[3551] = d[3335];
  d[3563] = d[3335];
  d[3315] = d[3339];
  d[3543] = d[3339];
  d[3567] = d[3339];
  d[3313] = d[3343];
  d[3541] = d[3343];
  d[3571] = d[3343];
  d[3311] = d[3347];
  d[3539] = d[3347];
  d[3575] = d[3347];
  d[3579] = d[3351];
  d[3583] = d[3355];
  d[3587] = d[3359];
  d[3591] = d[3363];
  d[3595] = d[3367];
  d[3599] = d[3371];
  d[3417] = d[3375];
  d[3603] = d[3375];
  d[3645] = d[3375];
  d[3415] = d[3379];
  d[3607] = d[3379];
  d[3643] = d[3379];
  d[3413] = d[3383];
  d[3611] = d[3383];
  d[3641] = d[3383];
  d[3405] = d[3387];
  d[3615] = d[3387];
  d[3633] = d[3387];
  d[3403] = d[3391];
  d[3619] = d[3391];
  d[3631] = d[3391];
  d[3401] = d[3395];
  d[3623] = d[3395];
  d[3629] = d[3395];
  d[3439] = d[3445];
  d[3437] = d[3449];
  d[3429] = d[3453];
  d[3427] = d[3457];
  d[3425] = d[3461];
  d[3531] = d[3489];
  d[3529] = d[3493];
  d[3527] = d[3497];
  d[3519] = d[3501];
  d[3517] = d[3505];
  d[3515] = d[3509];
}

void set_nonce_bytes_1(__local const uchar* R,__private uchar* d,__private uchar l) {
  for (int i = 1, k = 820; i < 73; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 73, k = 934; i < 145; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 145, k = 1048; i < 217; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 217, k = 1162; i < 289; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 289, k = 1276; i < 361; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 361, k = 1390; i < 433; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 433, k = 1504; i < 505; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 505, k = 1618; i < 577; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 577, k = 1732; i < 649; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 649, k = 1846; i < 721; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 721, k = 1960; i < 793; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 793, k = 2074; i < 865; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 865, k = 2188; i < 937; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 937, k = 2302; i < 1009; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1009, k = 2416; i < 1081; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1081, k = 2530; i < 1153; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1153, k = 2644; i < 1225; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1225, k = 2758; i < 1297; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1297, k = 2872; i < 1369; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1369, k = 2986; i < 1441; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1441, k = 3100; i < 1513; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1513, k = 3214; i < 1585; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1585, k = 3328; i < 1657; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1657, k = 3442; i < 1729; i += 4, k += 4) d[k] = R[i] ^ l;
  d[818] = d[824];
  d[810] = d[828];
  d[808] = d[832];
  d[806] = d[836];
  d[798] = d[840];
  d[910] = d[868];
  d[908] = d[872];
  d[900] = d[876];
  d[898] = d[880];
  d[896] = d[884];
  d[706] = d[934];
  d[704] = d[938];
  d[710] = d[938];
  d[932] = d[938];
  d[696] = d[942];
  d[714] = d[942];
  d[924] = d[942];
  d[694] = d[946];
  d[718] = d[946];
  d[922] = d[946];
  d[692] = d[950];
  d[722] = d[950];
  d[920] = d[950];
  d[684] = d[954];
  d[726] = d[954];
  d[912] = d[954];
  d[730] = d[958];
  d[734] = d[962];
  d[738] = d[966];
  d[742] = d[970];
  d[746] = d[974];
  d[750] = d[978];
  d[754] = d[982];
  d[796] = d[982];
  d[1024] = d[982];
  d[758] = d[986];
  d[794] = d[986];
  d[1022] = d[986];
  d[762] = d[990];
  d[786] = d[990];
  d[1014] = d[990];
  d[766] = d[994];
  d[784] = d[994];
  d[1012] = d[994];
  d[770] = d[998];
  d[782] = d[998];
  d[1010] = d[998];
  d[774] = d[1002];
  d[592] = d[1048];
  d[590] = d[1052];
  d[596] = d[1052];
  d[1046] = d[1052];
  d[582] = d[1056];
  d[600] = d[1056];
  d[1038] = d[1056];
  d[580] = d[1060];
  d[604] = d[1060];
  d[1036] = d[1060];
  d[578] = d[1064];
  d[608] = d[1064];
  d[1034] = d[1064];
  d[570] = d[1068];
  d[612] = d[1068];
  d[1026] = d[1068];
  d[616] = d[1072];
  d[620] = d[1076];
  d[624] = d[1080];
  d[628] = d[1084];
  d[632] = d[1088];
  d[636] = d[1092];
  d[640] = d[1096];
  d[682] = d[1096];
  d[1138] = d[1096];
  d[644] = d[1100];
  d[680] = d[1100];
  d[1136] = d[1100];
  d[648] = d[1104];
  d[672] = d[1104];
  d[1128] = d[1104];
  d[652] = d[1108];
  d[670] = d[1108];
  d[1126] = d[1108];
  d[656] = d[1112];
  d[668] = d[1112];
  d[1124] = d[1112];
  d[660] = d[1116];
  d[478] = d[1162];
  d[476] = d[1166];
  d[482] = d[1166];
  d[1160] = d[1166];
  d[468] = d[1170];
  d[486] = d[1170];
  d[1152] = d[1170];
  d[466] = d[1174];
  d[490] = d[1174];
  d[1150] = d[1174];
  d[464] = d[1178];
  d[494] = d[1178];
  d[1148] = d[1178];
  d[456] = d[1182];
  d[498] = d[1182];
  d[1140] = d[1182];
  d[502] = d[1186];
  d[506] = d[1190];
  d[510] = d[1194];
  d[514] = d[1198];
  d[518] = d[1202];
  d[522] = d[1206];
  d[526] = d[1210];
  d[568] = d[1210];
  d[1252] = d[1210];
  d[530] = d[1214];
  d[566] = d[1214];
  d[1250] = d[1214];
  d[534] = d[1218];
  d[558] = d[1218];
  d[1242] = d[1218];
  d[538] = d[1222];
  d[556] = d[1222];
  d[1240] = d[1222];
  d[542] = d[1226];
  d[554] = d[1226];
  d[1238] = d[1226];
  d[546] = d[1230];
  d[364] = d[1276];
  d[362] = d[1280];
  d[368] = d[1280];
  d[1274] = d[1280];
  d[354] = d[1284];
  d[372] = d[1284];
  d[1266] = d[1284];
  d[352] = d[1288];
  d[376] = d[1288];
  d[1264] = d[1288];
  d[350] = d[1292];
  d[380] = d[1292];
  d[1262] = d[1292];
  d[342] = d[1296];
  d[384] = d[1296];
  d[1254] = d[1296];
  d[388] = d[1300];
  d[392] = d[1304];
  d[396] = d[1308];
  d[400] = d[1312];
  d[404] = d[1316];
  d[408] = d[1320];
  d[412] = d[1324];
  d[454] = d[1324];
  d[1366] = d[1324];
  d[416] = d[1328];
  d[452] = d[1328];
  d[1364] = d[1328];
  d[420] = d[1332];
  d[444] = d[1332];
  d[1356] = d[1332];
  d[424] = d[1336];
  d[442] = d[1336];
  d[1354] = d[1336];
  d[428] = d[1340];
  d[440] = d[1340];
  d[1352] = d[1340];
  d[432] = d[1344];
  d[250] = d[1390];
  d[248] = d[1394];
  d[254] = d[1394];
  d[1388] = d[1394];
  d[240] = d[1398];
  d[258] = d[1398];
  d[1380] = d[1398];
  d[238] = d[1402];
  d[262] = d[1402];
  d[1378] = d[1402];
  d[236] = d[1406];
  d[266] = d[1406];
  d[1376] = d[1406];
  d[228] = d[1410];
  d[270] = d[1410];
  d[1368] = d[1410];
  d[274] = d[1414];
  d[278] = d[1418];
  d[282] = d[1422];
  d[286] = d[1426];
  d[290] = d[1430];
  d[294] = d[1434];
  d[298] = d[1438];
  d[340] = d[1438];
  d[1480] = d[1438];
  d[302] = d[1442];
  d[338] = d[1442];
  d[1478] = d[1442];
  d[306] = d[1446];
  d[330] = d[1446];
  d[1470] = d[1446];
  d[310] = d[1450];
  d[328] = d[1450];
  d[1468] = d[1450];
  d[314] = d[1454];
  d[326] = d[1454];
  d[1466] = d[1454];
  d[318] = d[1458];
  d[136] = d[1504];
  d[134] = d[1508];
  d[140] = d[1508];
  d[1502] = d[1508];
  d[126] = d[1512];
  d[144] = d[1512];
  d[1494] = d[1512];
  d[124] = d[1516];
  d[148] = d[1516];
  d[1492] = d[1516];
  d[122] = d[1520];
  d[152] = d[1520];
  d[1490] = d[1520];
  d[114] = d[1524];
  d[156] = d[1524];
  d[1482] = d[1524];
  d[160] = d[1528];
  d[164] = d[1532];
  d[168] = d[1536];
  d[172] = d[1540];
  d[176] = d[1544];
  d[180] = d[1548];
  d[184] = d[1552];
  d[226] = d[1552];
  d[1594] = d[1552];
  d[188] = d[1556];
  d[224] = d[1556];
  d[1592] = d[1556];
  d[192] = d[1560];
  d[216] = d[1560];
  d[1584] = d[1560];
  d[196] = d[1564];
  d[214] = d[1564];
  d[1582] = d[1564];
  d[200] = d[1568];
  d[212] = d[1568];
  d[1580] = d[1568];
  d[204] = d[1572];
  d[22] = d[1618];
  d[20] = d[1622];
  d[26] = d[1622];
  d[1616] = d[1622];
  d[12] = d[1626];
  d[30] = d[1626];
  d[1608] = d[1626];
  d[10] = d[1630];
  d[34] = d[1630];
  d[1606] = d[1630];
  d[8] = d[1634];
  d[38] = d[1634];
  d[1604] = d[1634];
  d[0] = d[1638];
  d[42] = d[1638];
  d[1596] = d[1638];
  d[46] = d[1642];
  d[50] = d[1646];
  d[54] = d[1650];
  d[58] = d[1654];
  d[62] = d[1658];
  d[66] = d[1662];
  d[70] = d[1666];
  d[112] = d[1666];
  d[1708] = d[1666];
  d[74] = d[1670];
  d[110] = d[1670];
  d[1706] = d[1670];
  d[78] = d[1674];
  d[102] = d[1674];
  d[1698] = d[1674];
  d[82] = d[1678];
  d[100] = d[1678];
  d[1696] = d[1678];
  d[86] = d[1682];
  d[98] = d[1682];
  d[1694] = d[1682];
  d[90] = d[1686];
  d[1730] = d[1736];
  d[1722] = d[1740];
  d[1720] = d[1744];
  d[1718] = d[1748];
  d[1710] = d[1752];
  d[1822] = d[1780];
  d[1820] = d[1784];
  d[1812] = d[1788];
  d[1810] = d[1792];
  d[1808] = d[1796];
  d[1844] = d[1850];
  d[1836] = d[1854];
  d[1834] = d[1858];
  d[1832] = d[1862];
  d[1824] = d[1866];
  d[1936] = d[1894];
  d[1934] = d[1898];
  d[1926] = d[1902];
  d[1924] = d[1906];
  d[1922] = d[1910];
  d[1958] = d[1964];
  d[1950] = d[1968];
  d[1948] = d[1972];
  d[1946] = d[1976];
  d[1938] = d[1980];
  d[2050] = d[2008];
  d[2048] = d[2012];
  d[2040] = d[2016];
  d[2038] = d[2020];
  d[2036] = d[2024];
  d[2072] = d[2078];
  d[2064] = d[2082];
  d[2062] = d[2086];
  d[2060] = d[2090];
  d[2052] = d[2094];
  d[2164] = d[2122];
  d[2162] = d[2126];
  d[2154] = d[2130];
  d[2152] = d[2134];
  d[2150] = d[2138];
  d[2186] = d[2192];
  d[2178] = d[2196];
  d[2176] = d[2200];
  d[2174] = d[2204];
  d[2166] = d[2208];
  d[2278] = d[2236];
  d[2276] = d[2240];
  d[2268] = d[2244];
  d[2266] = d[2248];
  d[2264] = d[2252];
  d[2300] = d[2306];
  d[2292] = d[2310];
  d[2290] = d[2314];
  d[2288] = d[2318];
  d[2280] = d[2322];
  d[2392] = d[2350];
  d[2390] = d[2354];
  d[2382] = d[2358];
  d[2380] = d[2362];
  d[2378] = d[2366];
  d[2414] = d[2420];
  d[2406] = d[2424];
  d[2404] = d[2428];
  d[2402] = d[2432];
  d[2394] = d[2436];
  d[2506] = d[2464];
  d[2504] = d[2468];
  d[2496] = d[2472];
  d[2494] = d[2476];
  d[2492] = d[2480];
  d[2528] = d[2534];
  d[2520] = d[2538];
  d[2518] = d[2542];
  d[2516] = d[2546];
  d[2508] = d[2550];
  d[2620] = d[2578];
  d[2618] = d[2582];
  d[2610] = d[2586];
  d[2608] = d[2590];
  d[2606] = d[2594];
  d[4240] = d[2644];
  d[2642] = d[2648];
  d[4238] = d[2648];
  d[4244] = d[2648];
  d[2634] = d[2652];
  d[4230] = d[2652];
  d[4248] = d[2652];
  d[2632] = d[2656];
  d[4228] = d[2656];
  d[4252] = d[2656];
  d[2630] = d[2660];
  d[4226] = d[2660];
  d[4256] = d[2660];
  d[2622] = d[2664];
  d[4218] = d[2664];
  d[4260] = d[2664];
  d[4264] = d[2668];
  d[4268] = d[2672];
  d[4272] = d[2676];
  d[4276] = d[2680];
  d[4280] = d[2684];
  d[4284] = d[2688];
  d[2734] = d[2692];
  d[4288] = d[2692];
  d[4330] = d[2692];
  d[2732] = d[2696];
  d[4292] = d[2696];
  d[4328] = d[2696];
  d[2724] = d[2700];
  d[4296] = d[2700];
  d[4320] = d[2700];
  d[2722] = d[2704];
  d[4300] = d[2704];
  d[4318] = d[2704];
  d[2720] = d[2708];
  d[4304] = d[2708];
  d[4316] = d[2708];
  d[4308] = d[2712];
  d[4126] = d[2758];
  d[2756] = d[2762];
  d[4124] = d[2762];
  d[4130] = d[2762];
  d[2748] = d[2766];
  d[4116] = d[2766];
  d[4134] = d[2766];
  d[2746] = d[2770];
  d[4114] = d[2770];
  d[4138] = d[2770];
  d[2744] = d[2774];
  d[4112] = d[2774];
  d[4142] = d[2774];
  d[2736] = d[2778];
  d[4104] = d[2778];
  d[4146] = d[2778];
  d[4150] = d[2782];
  d[4154] = d[2786];
  d[4158] = d[2790];
  d[4162] = d[2794];
  d[4166] = d[2798];
  d[4170] = d[2802];
  d[2848] = d[2806];
  d[4174] = d[2806];
  d[4216] = d[2806];
  d[2846] = d[2810];
  d[4178] = d[2810];
  d[4214] = d[2810];
  d[2838] = d[2814];
  d[4182] = d[2814];
  d[4206] = d[2814];
  d[2836] = d[2818];
  d[4186] = d[2818];
  d[4204] = d[2818];
  d[2834] = d[2822];
  d[4190] = d[2822];
  d[4202] = d[2822];
  d[4194] = d[2826];
  d[4012] = d[2872];
  d[2870] = d[2876];
  d[4010] = d[2876];
  d[4016] = d[2876];
  d[2862] = d[2880];
  d[4002] = d[2880];
  d[4020] = d[2880];
  d[2860] = d[2884];
  d[4000] = d[2884];
  d[4024] = d[2884];
  d[2858] = d[2888];
  d[3998] = d[2888];
  d[4028] = d[2888];
  d[2850] = d[2892];
  d[3990] = d[2892];
  d[4032] = d[2892];
  d[4036] = d[2896];
  d[4040] = d[2900];
  d[4044] = d[2904];
  d[4048] = d[2908];
  d[4052] = d[2912];
  d[4056] = d[2916];
  d[2962] = d[2920];
  d[4060] = d[2920];
  d[4102] = d[2920];
  d[2960] = d[2924];
  d[4064] = d[2924];
  d[4100] = d[2924];
  d[2952] = d[2928];
  d[4068] = d[2928];
  d[4092] = d[2928];
  d[2950] = d[2932];
  d[4072] = d[2932];
  d[4090] = d[2932];
  d[2948] = d[2936];
  d[4076] = d[2936];
  d[4088] = d[2936];
  d[4080] = d[2940];
  d[3898] = d[2986];
  d[2984] = d[2990];
  d[3896] = d[2990];
  d[3902] = d[2990];
  d[2976] = d[2994];
  d[3888] = d[2994];
  d[3906] = d[2994];
  d[2974] = d[2998];
  d[3886] = d[2998];
  d[3910] = d[2998];
  d[2972] = d[3002];
  d[3884] = d[3002];
  d[3914] = d[3002];
  d[2964] = d[3006];
  d[3876] = d[3006];
  d[3918] = d[3006];
  d[3922] = d[3010];
  d[3926] = d[3014];
  d[3930] = d[3018];
  d[3934] = d[3022];
  d[3938] = d[3026];
  d[3942] = d[3030];
  d[3076] = d[3034];
  d[3946] = d[3034];
  d[3988] = d[3034];
  d[3074] = d[3038];
  d[3950] = d[3038];
  d[3986] = d[3038];
  d[3066] = d[3042];
  d[3954] = d[3042];
  d[3978] = d[3042];
  d[3064] = d[3046];
  d[3958] = d[3046];
  d[3976] = d[3046];
  d[3062] = d[3050];
  d[3962] = d[3050];
  d[3974] = d[3050];
  d[3966] = d[3054];
  d[3784] = d[3100];
  d[3098] = d[3104];
  d[3782] = d[3104];
  d[3788] = d[3104];
  d[3090] = d[3108];
  d[3774] = d[3108];
  d[3792] = d[3108];
  d[3088] = d[3112];
  d[3772] = d[3112];
  d[3796] = d[3112];
  d[3086] = d[3116];
  d[3770] = d[3116];
  d[3800] = d[3116];
  d[3078] = d[3120];
  d[3762] = d[3120];
  d[3804] = d[3120];
  d[3808] = d[3124];
  d[3812] = d[3128];
  d[3816] = d[3132];
  d[3820] = d[3136];
  d[3824] = d[3140];
  d[3828] = d[3144];
  d[3190] = d[3148];
  d[3832] = d[3148];
  d[3874] = d[3148];
  d[3188] = d[3152];
  d[3836] = d[3152];
  d[3872] = d[3152];
  d[3180] = d[3156];
  d[3840] = d[3156];
  d[3864] = d[3156];
  d[3178] = d[3160];
  d[3844] = d[3160];
  d[3862] = d[3160];
  d[3176] = d[3164];
  d[3848] = d[3164];
  d[3860] = d[3164];
  d[3852] = d[3168];
  d[3670] = d[3214];
  d[3212] = d[3218];
  d[3668] = d[3218];
  d[3674] = d[3218];
  d[3204] = d[3222];
  d[3660] = d[3222];
  d[3678] = d[3222];
  d[3202] = d[3226];
  d[3658] = d[3226];
  d[3682] = d[3226];
  d[3200] = d[3230];
  d[3656] = d[3230];
  d[3686] = d[3230];
  d[3192] = d[3234];
  d[3648] = d[3234];
  d[3690] = d[3234];
  d[3694] = d[3238];
  d[3698] = d[3242];
  d[3702] = d[3246];
  d[3706] = d[3250];
  d[3710] = d[3254];
  d[3714] = d[3258];
  d[3304] = d[3262];
  d[3718] = d[3262];
  d[3760] = d[3262];
  d[3302] = d[3266];
  d[3722] = d[3266];
  d[3758] = d[3266];
  d[3294] = d[3270];
  d[3726] = d[3270];
  d[3750] = d[3270];
  d[3292] = d[3274];
  d[3730] = d[3274];
  d[3748] = d[3274];
  d[3290] = d[3278];
  d[3734] = d[3278];
  d[3746] = d[3278];
  d[3738] = d[3282];
  d[3556] = d[3328];
  d[3326] = d[3332];
  d[3554] = d[3332];
  d[3560] = d[3332];
  d[3318] = d[3336];
  d[3546] = d[3336];
  d[3564] = d[3336];
  d[3316] = d[3340];
  d[3544] = d[3340];
  d[3568] = d[3340];
  d[3314] = d[3344];
  d[3542] = d[3344];
  d[3572] = d[3344];
  d[3306] = d[3348];
  d[3534] = d[3348];
  d[3576] = d[3348];
  d[3580] = d[3352];
  d[3584] = d[3356];
  d[3588] = d[3360];
  d[3592] = d[3364];
  d[3596] = d[3368];
  d[3600] = d[3372];
  d[3418] = d[3376];
  d[3604] = d[3376];
  d[3646] = d[3376];
  d[3416] = d[3380];
  d[3608] = d[3380];
  d[3644] = d[3380];
  d[3408] = d[3384];
  d[3612] = d[3384];
  d[3636] = d[3384];
  d[3406] = d[3388];
  d[3616] = d[3388];
  d[3634] = d[3388];
  d[3404] = d[3392];
  d[3620] = d[3392];
  d[3632] = d[3392];
  d[3624] = d[3396];
  d[3440] = d[3446];
  d[3432] = d[3450];
  d[3430] = d[3454];
  d[3428] = d[3458];
  d[3420] = d[3462];
  d[3532] = d[3490];
  d[3530] = d[3494];
  d[3522] = d[3498];
  d[3520] = d[3502];
  d[3518] = d[3506];
}

void set_nonce_bytes_2(__local const uchar* R,__private uchar* d,__private uchar l) {
  for (int i = 2, k = 821; i < 74; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 74, k = 935; i < 146; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 146, k = 1049; i < 218; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 218, k = 1163; i < 290; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 290, k = 1277; i < 362; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 362, k = 1391; i < 434; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 434, k = 1505; i < 506; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 506, k = 1619; i < 578; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 578, k = 1733; i < 650; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 650, k = 1847; i < 722; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 722, k = 1961; i < 794; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 794, k = 2075; i < 866; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 866, k = 2189; i < 938; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 938, k = 2303; i < 1010; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1010, k = 2417; i < 1082; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1082, k = 2531; i < 1154; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1154, k = 2645; i < 1226; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1226, k = 2759; i < 1298; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1298, k = 2873; i < 1370; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1370, k = 2987; i < 1442; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1442, k = 3101; i < 1514; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1514, k = 3215; i < 1586; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1586, k = 3329; i < 1658; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1658, k = 3443; i < 1730; i += 4, k += 4) d[k] = R[i] ^ l;
  d[813] = d[825];
  d[811] = d[829];
  d[809] = d[833];
  d[801] = d[837];
  d[799] = d[841];
  d[911] = d[869];
  d[903] = d[873];
  d[901] = d[877];
  d[899] = d[881];
  d[891] = d[885];
  d[707] = d[935];
  d[699] = d[939];
  d[711] = d[939];
  d[927] = d[939];
  d[697] = d[943];
  d[715] = d[943];
  d[925] = d[943];
  d[695] = d[947];
  d[719] = d[947];
  d[923] = d[947];
  d[687] = d[951];
  d[723] = d[951];
  d[915] = d[951];
  d[685] = d[955];
  d[727] = d[955];
  d[913] = d[955];
  d[731] = d[959];
  d[735] = d[963];
  d[739] = d[967];
  d[743] = d[971];
  d[747] = d[975];
  d[751] = d[979];
  d[755] = d[983];
  d[797] = d[983];
  d[1025] = d[983];
  d[759] = d[987];
  d[789] = d[987];
  d[1017] = d[987];
  d[763] = d[991];
  d[787] = d[991];
  d[1015] = d[991];
  d[767] = d[995];
  d[785] = d[995];
  d[1013] = d[995];
  d[771] = d[999];
  d[777] = d[999];
  d[1005] = d[999];
  d[775] = d[1003];
  d[593] = d[1049];
  d[585] = d[1053];
  d[597] = d[1053];
  d[1041] = d[1053];
  d[583] = d[1057];
  d[601] = d[1057];
  d[1039] = d[1057];
  d[581] = d[1061];
  d[605] = d[1061];
  d[1037] = d[1061];
  d[573] = d[1065];
  d[609] = d[1065];
  d[1029] = d[1065];
  d[571] = d[1069];
  d[613] = d[1069];
  d[1027] = d[1069];
  d[617] = d[1073];
  d[621] = d[1077];
  d[625] = d[1081];
  d[629] = d[1085];
  d[633] = d[1089];
  d[637] = d[1093];
  d[641] = d[1097];
  d[683] = d[1097];
  d[1139] = d[1097];
  d[645] = d[1101];
  d[675] = d[1101];
  d[1131] = d[1101];
  d[649] = d[1105];
  d[673] = d[1105];
  d[1129] = d[1105];
  d[653] = d[1109];
  d[671] = d[1109];
  d[1127] = d[1109];
  d[657] = d[1113];
  d[663] = d[1113];
  d[1119] = d[1113];
  d[661] = d[1117];
  d[479] = d[1163];
  d[471] = d[1167];
  d[483] = d[1167];
  d[1155] = d[1167];
  d[469] = d[1171];
  d[487] = d[1171];
  d[1153] = d[1171];
  d[467] = d[1175];
  d[491] = d[1175];
  d[1151] = d[1175];
  d[459] = d[1179];
  d[495] = d[1179];
  d[1143] = d[1179];
  d[457] = d[1183];
  d[499] = d[1183];
  d[1141] = d[1183];
  d[503] = d[1187];
  d[507] = d[1191];
  d[511] = d[1195];
  d[515] = d[1199];
  d[519] = d[1203];
  d[523] = d[1207];
  d[527] = d[1211];
  d[569] = d[1211];
  d[1253] = d[1211];
  d[531] = d[1215];
  d[561] = d[1215];
  d[1245] = d[1215];
  d[535] = d[1219];
  d[559] = d[1219];
  d[1243] = d[1219];
  d[539] = d[1223];
  d[557] = d[1223];
  d[1241] = d[1223];
  d[543] = d[1227];
  d[549] = d[1227];
  d[1233] = d[1227];
  d[547] = d[1231];
  d[365] = d[1277];
  d[357] = d[1281];
  d[369] = d[1281];
  d[1269] = d[1281];
  d[355] = d[1285];
  d[373] = d[1285];
  d[1267] = d[1285];
  d[353] = d[1289];
  d[377] = d[1289];
  d[1265] = d[1289];
  d[345] = d[1293];
  d[381] = d[1293];
  d[1257] = d[1293];
  d[343] = d[1297];
  d[385] = d[1297];
  d[1255] = d[1297];
  d[389] = d[1301];
  d[393] = d[1305];
  d[397] = d[1309];
  d[401] = d[1313];
  d[405] = d[1317];
  d[409] = d[1321];
  d[413] = d[1325];
  d[455] = d[1325];
  d[1367] = d[1325];
  d[417] = d[1329];
  d[447] = d[1329];
  d[1359] = d[1329];
  d[421] = d[1333];
  d[445] = d[1333];
  d[1357] = d[1333];
  d[425] = d[1337];
  d[443] = d[1337];
  d[1355] = d[1337];
  d[429] = d[1341];
  d[435] = d[1341];
  d[1347] = d[1341];
  d[433] = d[1345];
  d[251] = d[1391];
  d[243] = d[1395];
  d[255] = d[1395];
  d[1383] = d[1395];
  d[241] = d[1399];
  d[259] = d[1399];
  d[1381] = d[1399];
  d[239] = d[1403];
  d[263] = d[1403];
  d[1379] = d[1403];
  d[231] = d[1407];
  d[267] = d[1407];
  d[1371] = d[1407];
  d[229] = d[1411];
  d[271] = d[1411];
  d[1369] = d[1411];
  d[275] = d[1415];
  d[279] = d[1419];
  d[283] = d[1423];
  d[287] = d[1427];
  d[291] = d[1431];
  d[295] = d[1435];
  d[299] = d[1439];
  d[341] = d[1439];
  d[1481] = d[1439];
  d[303] = d[1443];
  d[333] = d[1443];
  d[1473] = d[1443];
  d[307] = d[1447];
  d[331] = d[1447];
  d[1471] = d[1447];
  d[311] = d[1451];
  d[329] = d[1451];
  d[1469] = d[1451];
  d[315] = d[1455];
  d[321] = d[1455];
  d[1461] = d[1455];
  d[319] = d[1459];
  d[137] = d[1505];
  d[129] = d[1509];
  d[141] = d[1509];
  d[1497] = d[1509];
  d[127] = d[1513];
  d[145] = d[1513];
  d[1495] = d[1513];
  d[125] = d[1517];
  d[149] = d[1517];
  d[1493] = d[1517];
  d[117] = d[1521];
  d[153] = d[1521];
  d[1485] = d[1521];
  d[115] = d[1525];
  d[157] = d[1525];
  d[1483] = d[1525];
  d[161] = d[1529];
  d[165] = d[1533];
  d[169] = d[1537];
  d[173] = d[1541];
  d[177] = d[1545];
  d[181] = d[1549];
  d[185] = d[1553];
  d[227] = d[1553];
  d[1595] = d[1553];
  d[189] = d[1557];
  d[219] = d[1557];
  d[1587] = d[1557];
  d[193] = d[1561];
  d[217] = d[1561];
  d[1585] = d[1561];
  d[197] = d[1565];
  d[215] = d[1565];
  d[1583] = d[1565];
  d[201] = d[1569];
  d[207] = d[1569];
  d[1575] = d[1569];
  d[205] = d[1573];
  d[23] = d[1619];
  d[15] = d[1623];
  d[27] = d[1623];
  d[1611] = d[1623];
  d[13] = d[1627];
  d[31] = d[1627];
  d[1609] = d[1627];
  d[11] = d[1631];
  d[35] = d[1631];
  d[1607] = d[1631];
  d[3] = d[1635];
  d[39] = d[1635];
  d[1599] = d[1635];
  d[1] = d[1639];
  d[43] = d[1639];
  d[1597] = d[1639];
  d[47] = d[1643];
  d[51] = d[1647];
  d[55] = d[1651];
  d[59] = d[1655];
  d[63] = d[1659];
  d[67] = d[1663];
  d[71] = d[1667];
  d[113] = d[1667];
  d[1709] = d[1667];
  d[75] = d[1671];
  d[105] = d[1671];
  d[1701] = d[1671];
  d[79] = d[1675];
  d[103] = d[1675];
  d[1699] = d[1675];
  d[83] = d[1679];
  d[101] = d[1679];
  d[1697] = d[1679];
  d[87] = d[1683];
  d[93] = d[1683];
  d[1689] = d[1683];
  d[91] = d[1687];
  d[1725] = d[1737];
  d[1723] = d[1741];
  d[1721] = d[1745];
  d[1713] = d[1749];
  d[1711] = d[1753];
  d[1823] = d[1781];
  d[1815] = d[1785];
  d[1813] = d[1789];
  d[1811] = d[1793];
  d[1803] = d[1797];
  d[1839] = d[1851];
  d[1837] = d[1855];
  d[1835] = d[1859];
  d[1827] = d[1863];
  d[1825] = d[1867];
  d[1937] = d[1895];
  d[1929] = d[1899];
  d[1927] = d[1903];
  d[1925] = d[1907];
  d[1917] = d[1911];
  d[1953] = d[1965];
  d[1951] = d[1969];
  d[1949] = d[1973];
  d[1941] = d[1977];
  d[1939] = d[1981];
  d[2051] = d[2009];
  d[2043] = d[2013];
  d[2041] = d[2017];
  d[2039] = d[2021];
  d[2031] = d[2025];
  d[2067] = d[2079];
  d[2065] = d[2083];
  d[2063] = d[2087];
  d[2055] = d[2091];
  d[2053] = d[2095];
  d[2165] = d[2123];
  d[2157] = d[2127];
  d[2155] = d[2131];
  d[2153] = d[2135];
  d[2145] = d[2139];
  d[2181] = d[2193];
  d[2179] = d[2197];
  d[2177] = d[2201];
  d[2169] = d[2205];
  d[2167] = d[2209];
  d[2279] = d[2237];
  d[2271] = d[2241];
  d[2269] = d[2245];
  d[2267] = d[2249];
  d[2259] = d[2253];
  d[2295] = d[2307];
  d[2293] = d[2311];
  d[2291] = d[2315];
  d[2283] = d[2319];
  d[2281] = d[2323];
  d[2393] = d[2351];
  d[2385] = d[2355];
  d[2383] = d[2359];
  d[2381] = d[2363];
  d[2373] = d[2367];
  d[2409] = d[2421];
  d[2407] = d[2425];
  d[2405] = d[2429];
  d[2397] = d[2433];
  d[2395] = d[2437];
  d[2507] = d[2465];
  d[2499] = d[2469];
  d[2497] = d[2473];
  d[2495] = d[2477];
  d[2487] = d[2481];
  d[2523] = d[2535];
  d[2521] = d[2539];
  d[2519] = d[2543];
  d[2511] = d[2547];
  d[2509] = d[2551];
  d[2621] = d[2579];
  d[2613] = d[2583];
  d[2611] = d[2587];
  d[2609] = d[2591];
  d[2601] = d[2595];
  d[4241] = d[2645];
  d[2637] = d[2649];
  d[4233] = d[2649];
  d[4245] = d[2649];
  d[2635] = d[2653];
  d[4231] = d[2653];
  d[4249] = d[2653];
  d[2633] = d[2657];
  d[4229] = d[2657];
  d[4253] = d[2657];
  d[2625] = d[2661];
  d[4221] = d[2661];
  d[4257] = d[2661];
  d[2623] = d[2665];
  d[4219] = d[2665];
  d[4261] = d[2665];
  d[4265] = d[2669];
  d[4269] = d[2673];
  d[4273] = d[2677];
  d[4277] = d[2681];
  d[4281] = d[2685];
  d[4285] = d[2689];
  d[2735] = d[2693];
  d[4289] = d[2693];
  d[4331] = d[2693];
  d[2727] = d[2697];
  d[4293] = d[2697];
  d[4323] = d[2697];
  d[2725] = d[2701];
  d[4297] = d[2701];
  d[4321] = d[2701];
  d[2723] = d[2705];
  d[4301] = d[2705];
  d[4319] = d[2705];
  d[2715] = d[2709];
  d[4305] = d[2709];
  d[4311] = d[2709];
  d[4309] = d[2713];
  d[4127] = d[2759];
  d[2751] = d[2763];
  d[4119] = d[2763];
  d[4131] = d[2763];
  d[2749] = d[2767];
  d[4117] = d[2767];
  d[4135] = d[2767];
  d[2747] = d[2771];
  d[4115] = d[2771];
  d[4139] = d[2771];
  d[2739] = d[2775];
  d[4107] = d[2775];
  d[4143] = d[2775];
  d[2737] = d[2779];
  d[4105] = d[2779];
  d[4147] = d[2779];
  d[4151] = d[2783];
  d[4155] = d[2787];
  d[4159] = d[2791];
  d[4163] = d[2795];
  d[4167] = d[2799];
  d[4171] = d[2803];
  d[2849] = d[2807];
  d[4175] = d[2807];
  d[4217] = d[2807];
  d[2841] = d[2811];
  d[4179] = d[2811];
  d[4209] = d[2811];
  d[2839] = d[2815];
  d[4183] = d[2815];
  d[4207] = d[2815];
  d[2837] = d[2819];
  d[4187] = d[2819];
  d[4205] = d[2819];
  d[2829] = d[2823];
  d[4191] = d[2823];
  d[4197] = d[2823];
  d[4195] = d[2827];
  d[4013] = d[2873];
  d[2865] = d[2877];
  d[4005] = d[2877];
  d[4017] = d[2877];
  d[2863] = d[2881];
  d[4003] = d[2881];
  d[4021] = d[2881];
  d[2861] = d[2885];
  d[4001] = d[2885];
  d[4025] = d[2885];
  d[2853] = d[2889];
  d[3993] = d[2889];
  d[4029] = d[2889];
  d[2851] = d[2893];
  d[3991] = d[2893];
  d[4033] = d[2893];
  d[4037] = d[2897];
  d[4041] = d[2901];
  d[4045] = d[2905];
  d[4049] = d[2909];
  d[4053] = d[2913];
  d[4057] = d[2917];
  d[2963] = d[2921];
  d[4061] = d[2921];
  d[4103] = d[2921];
  d[2955] = d[2925];
  d[4065] = d[2925];
  d[4095] = d[2925];
  d[2953] = d[2929];
  d[4069] = d[2929];
  d[4093] = d[2929];
  d[2951] = d[2933];
  d[4073] = d[2933];
  d[4091] = d[2933];
  d[2943] = d[2937];
  d[4077] = d[2937];
  d[4083] = d[2937];
  d[4081] = d[2941];
  d[3899] = d[2987];
  d[2979] = d[2991];
  d[3891] = d[2991];
  d[3903] = d[2991];
  d[2977] = d[2995];
  d[3889] = d[2995];
  d[3907] = d[2995];
  d[2975] = d[2999];
  d[3887] = d[2999];
  d[3911] = d[2999];
  d[2967] = d[3003];
  d[3879] = d[3003];
  d[3915] = d[3003];
  d[2965] = d[3007];
  d[3877] = d[3007];
  d[3919] = d[3007];
  d[3923] = d[3011];
  d[3927] = d[3015];
  d[3931] = d[3019];
  d[3935] = d[3023];
  d[3939] = d[3027];
  d[3943] = d[3031];
  d[3077] = d[3035];
  d[3947] = d[3035];
  d[3989] = d[3035];
  d[3069] = d[3039];
  d[3951] = d[3039];
  d[3981] = d[3039];
  d[3067] = d[3043];
  d[3955] = d[3043];
  d[3979] = d[3043];
  d[3065] = d[3047];
  d[3959] = d[3047];
  d[3977] = d[3047];
  d[3057] = d[3051];
  d[3963] = d[3051];
  d[3969] = d[3051];
  d[3967] = d[3055];
  d[3785] = d[3101];
  d[3093] = d[3105];
  d[3777] = d[3105];
  d[3789] = d[3105];
  d[3091] = d[3109];
  d[3775] = d[3109];
  d[3793] = d[3109];
  d[3089] = d[3113];
  d[3773] = d[3113];
  d[3797] = d[3113];
  d[3081] = d[3117];
  d[3765] = d[3117];
  d[3801] = d[3117];
  d[3079] = d[3121];
  d[3763] = d[3121];
  d[3805] = d[3121];
  d[3809] = d[3125];
  d[3813] = d[3129];
  d[3817] = d[3133];
  d[3821] = d[3137];
  d[3825] = d[3141];
  d[3829] = d[3145];
  d[3191] = d[3149];
  d[3833] = d[3149];
  d[3875] = d[3149];
  d[3183] = d[3153];
  d[3837] = d[3153];
  d[3867] = d[3153];
  d[3181] = d[3157];
  d[3841] = d[3157];
  d[3865] = d[3157];
  d[3179] = d[3161];
  d[3845] = d[3161];
  d[3863] = d[3161];
  d[3171] = d[3165];
  d[3849] = d[3165];
  d[3855] = d[3165];
  d[3853] = d[3169];
  d[3671] = d[3215];
  d[3207] = d[3219];
  d[3663] = d[3219];
  d[3675] = d[3219];
  d[3205] = d[3223];
  d[3661] = d[3223];
  d[3679] = d[3223];
  d[3203] = d[3227];
  d[3659] = d[3227];
  d[3683] = d[3227];
  d[3195] = d[3231];
  d[3651] = d[3231];
  d[3687] = d[3231];
  d[3193] = d[3235];
  d[3649] = d[3235];
  d[3691] = d[3235];
  d[3695] = d[3239];
  d[3699] = d[3243];
  d[3703] = d[3247];
  d[3707] = d[3251];
  d[3711] = d[3255];
  d[3715] = d[3259];
  d[3305] = d[3263];
  d[3719] = d[3263];
  d[3761] = d[3263];
  d[3297] = d[3267];
  d[3723] = d[3267];
  d[3753] = d[3267];
  d[3295] = d[3271];
  d[3727] = d[3271];
  d[3751] = d[3271];
  d[3293] = d[3275];
  d[3731] = d[3275];
  d[3749] = d[3275];
  d[3285] = d[3279];
  d[3735] = d[3279];
  d[3741] = d[3279];
  d[3739] = d[3283];
  d[3557] = d[3329];
  d[3321] = d[3333];
  d[3549] = d[3333];
  d[3561] = d[3333];
  d[3319] = d[3337];
  d[3547] = d[3337];
  d[3565] = d[3337];
  d[3317] = d[3341];
  d[3545] = d[3341];
  d[3569] = d[3341];
  d[3309] = d[3345];
  d[3537] = d[3345];
  d[3573] = d[3345];
  d[3307] = d[3349];
  d[3535] = d[3349];
  d[3577] = d[3349];
  d[3581] = d[3353];
  d[3585] = d[3357];
  d[3589] = d[3361];
  d[3593] = d[3365];
  d[3597] = d[3369];
  d[3601] = d[3373];
  d[3419] = d[3377];
  d[3605] = d[3377];
  d[3647] = d[3377];
  d[3411] = d[3381];
  d[3609] = d[3381];
  d[3639] = d[3381];
  d[3409] = d[3385];
  d[3613] = d[3385];
  d[3637] = d[3385];
  d[3407] = d[3389];
  d[3617] = d[3389];
  d[3635] = d[3389];
  d[3399] = d[3393];
  d[3621] = d[3393];
  d[3627] = d[3393];
  d[3625] = d[3397];
  d[3435] = d[3447];
  d[3433] = d[3451];
  d[3431] = d[3455];
  d[3423] = d[3459];
  d[3421] = d[3463];
  d[3533] = d[3491];
  d[3525] = d[3495];
  d[3523] = d[3499];
  d[3521] = d[3503];
  d[3513] = d[3507];
}

void set_nonce_bytes_3(__local const uchar* R,__private uchar* d,__private uchar l) {
  for (int i = 3, k = 822; i < 72; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 75, k = 936; i < 144; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 147, k = 1050; i < 216; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 219, k = 1164; i < 288; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 291, k = 1278; i < 360; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 363, k = 1392; i < 432; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 435, k = 1506; i < 504; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 507, k = 1620; i < 576; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 579, k = 1734; i < 648; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 651, k = 1848; i < 720; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 723, k = 1962; i < 792; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 795, k = 2076; i < 864; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 867, k = 2190; i < 936; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 939, k = 2304; i < 1008; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1011, k = 2418; i < 1080; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1083, k = 2532; i < 1152; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1155, k = 2646; i < 1224; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1227, k = 2760; i < 1296; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1299, k = 2874; i < 1368; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1371, k = 2988; i < 1440; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1443, k = 3102; i < 1512; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1515, k = 3216; i < 1584; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1587, k = 3330; i < 1656; i += 4, k += 4) d[k] = R[i] ^ l;
  for (int i = 1659, k = 3444; i < 1728; i += 4, k += 4) d[k] = R[i] ^ l;
  d[816] = d[822];
  d[814] = d[826];
  d[812] = d[830];
  d[804] = d[834];
  d[802] = d[838];
  d[800] = d[842];
  d[906] = d[870];
  d[904] = d[874];
  d[902] = d[878];
  d[894] = d[882];
  d[892] = d[886];
  d[702] = d[936];
  d[708] = d[936];
  d[930] = d[936];
  d[700] = d[940];
  d[712] = d[940];
  d[928] = d[940];
  d[698] = d[944];
  d[716] = d[944];
  d[926] = d[944];
  d[690] = d[948];
  d[720] = d[948];
  d[918] = d[948];
  d[688] = d[952];
  d[724] = d[952];
  d[916] = d[952];
  d[686] = d[956];
  d[728] = d[956];
  d[914] = d[956];
  d[732] = d[960];
  d[736] = d[964];
  d[740] = d[968];
  d[744] = d[972];
  d[748] = d[976];
  d[752] = d[980];
  d[756] = d[984];
  d[792] = d[984];
  d[1020] = d[984];
  d[760] = d[988];
  d[790] = d[988];
  d[1018] = d[988];
  d[764] = d[992];
  d[788] = d[992];
  d[1016] = d[992];
  d[768] = d[996];
  d[780] = d[996];
  d[1008] = d[996];
  d[772] = d[1000];
  d[778] = d[1000];
  d[1006] = d[1000];
  d[776] = d[1004];
  d[588] = d[1050];
  d[594] = d[1050];
  d[1044] = d[1050];
  d[586] = d[1054];
  d[598] = d[1054];
  d[1042] = d[1054];
  d[584] = d[1058];
  d[602] = d[1058];
  d[1040] = d[1058];
  d[576] = d[1062];
  d[606] = d[1062];
  d[1032] = d[1062];
  d[574] = d[1066];
  d[610] = d[1066];
  d[1030] = d[1066];
  d[572] = d[1070];
  d[614] = d[1070];
  d[1028] = d[1070];
  d[618] = d[1074];
  d[622] = d[1078];
  d[626] = d[1082];
  d[630] = d[1086];
  d[634] = d[1090];
  d[638] = d[1094];
  d[642] = d[1098];
  d[678] = d[1098];
  d[1134] = d[1098];
  d[646] = d[1102];
  d[676] = d[1102];
  d[1132] = d[1102];
  d[650] = d[1106];
  d[674] = d[1106];
  d[1130] = d[1106];
  d[654] = d[1110];
  d[666] = d[1110];
  d[1122] = d[1110];
  d[658] = d[1114];
  d[664] = d[1114];
  d[1120] = d[1114];
  d[662] = d[1118];
  d[474] = d[1164];
  d[480] = d[1164];
  d[1158] = d[1164];
  d[472] = d[1168];
  d[484] = d[1168];
  d[1156] = d[1168];
  d[470] = d[1172];
  d[488] = d[1172];
  d[1154] = d[1172];
  d[462] = d[1176];
  d[492] = d[1176];
  d[1146] = d[1176];
  d[460] = d[1180];
  d[496] = d[1180];
  d[1144] = d[1180];
  d[458] = d[1184];
  d[500] = d[1184];
  d[1142] = d[1184];
  d[504] = d[1188];
  d[508] = d[1192];
  d[512] = d[1196];
  d[516] = d[1200];
  d[520] = d[1204];
  d[524] = d[1208];
  d[528] = d[1212];
  d[564] = d[1212];
  d[1248] = d[1212];
  d[532] = d[1216];
  d[562] = d[1216];
  d[1246] = d[1216];
  d[536] = d[1220];
  d[560] = d[1220];
  d[1244] = d[1220];
  d[540] = d[1224];
  d[552] = d[1224];
  d[1236] = d[1224];
  d[544] = d[1228];
  d[550] = d[1228];
  d[1234] = d[1228];
  d[548] = d[1232];
  d[360] = d[1278];
  d[366] = d[1278];
  d[1272] = d[1278];
  d[358] = d[1282];
  d[370] = d[1282];
  d[1270] = d[1282];
  d[356] = d[1286];
  d[374] = d[1286];
  d[1268] = d[1286];
  d[348] = d[1290];
  d[378] = d[1290];
  d[1260] = d[1290];
  d[346] = d[1294];
  d[382] = d[1294];
  d[1258] = d[1294];
  d[344] = d[1298];
  d[386] = d[1298];
  d[1256] = d[1298];
  d[390] = d[1302];
  d[394] = d[1306];
  d[398] = d[1310];
  d[402] = d[1314];
  d[406] = d[1318];
  d[410] = d[1322];
  d[414] = d[1326];
  d[450] = d[1326];
  d[1362] = d[1326];
  d[418] = d[1330];
  d[448] = d[1330];
  d[1360] = d[1330];
  d[422] = d[1334];
  d[446] = d[1334];
  d[1358] = d[1334];
  d[426] = d[1338];
  d[438] = d[1338];
  d[1350] = d[1338];
  d[430] = d[1342];
  d[436] = d[1342];
  d[1348] = d[1342];
  d[434] = d[1346];
  d[246] = d[1392];
  d[252] = d[1392];
  d[1386] = d[1392];
  d[244] = d[1396];
  d[256] = d[1396];
  d[1384] = d[1396];
  d[242] = d[1400];
  d[260] = d[1400];
  d[1382] = d[1400];
  d[234] = d[1404];
  d[264] = d[1404];
  d[1374] = d[1404];
  d[232] = d[1408];
  d[268] = d[1408];
  d[1372] = d[1408];
  d[230] = d[1412];
  d[272] = d[1412];
  d[1370] = d[1412];
  d[276] = d[1416];
  d[280] = d[1420];
  d[284] = d[1424];
  d[288] = d[1428];
  d[292] = d[1432];
  d[296] = d[1436];
  d[300] = d[1440];
  d[336] = d[1440];
  d[1476] = d[1440];
  d[304] = d[1444];
  d[334] = d[1444];
  d[1474] = d[1444];
  d[308] = d[1448];
  d[332] = d[1448];
  d[1472] = d[1448];
  d[312] = d[1452];
  d[324] = d[1452];
  d[1464] = d[1452];
  d[316] = d[1456];
  d[322] = d[1456];
  d[1462] = d[1456];
  d[320] = d[1460];
  d[132] = d[1506];
  d[138] = d[1506];
  d[1500] = d[1506];
  d[130] = d[1510];
  d[142] = d[1510];
  d[1498] = d[1510];
  d[128] = d[1514];
  d[146] = d[1514];
  d[1496] = d[1514];
  d[120] = d[1518];
  d[150] = d[1518];
  d[1488] = d[1518];
  d[118] = d[1522];
  d[154] = d[1522];
  d[1486] = d[1522];
  d[116] = d[1526];
  d[158] = d[1526];
  d[1484] = d[1526];
  d[162] = d[1530];
  d[166] = d[1534];
  d[170] = d[1538];
  d[174] = d[1542];
  d[178] = d[1546];
  d[182] = d[1550];
  d[186] = d[1554];
  d[222] = d[1554];
  d[1590] = d[1554];
  d[190] = d[1558];
  d[220] = d[1558];
  d[1588] = d[1558];
  d[194] = d[1562];
  d[218] = d[1562];
  d[1586] = d[1562];
  d[198] = d[1566];
  d[210] = d[1566];
  d[1578] = d[1566];
  d[202] = d[1570];
  d[208] = d[1570];
  d[1576] = d[1570];
  d[206] = d[1574];
  d[18] = d[1620];
  d[24] = d[1620];
  d[1614] = d[1620];
  d[16] = d[1624];
  d[28] = d[1624];
  d[1612] = d[1624];
  d[14] = d[1628];
  d[32] = d[1628];
  d[1610] = d[1628];
  d[6] = d[1632];
  d[36] = d[1632];
  d[1602] = d[1632];
  d[4] = d[1636];
  d[40] = d[1636];
  d[1600] = d[1636];
  d[2] = d[1640];
  d[44] = d[1640];
  d[1598] = d[1640];
  d[48] = d[1644];
  d[52] = d[1648];
  d[56] = d[1652];
  d[60] = d[1656];
  d[64] = d[1660];
  d[68] = d[1664];
  d[72] = d[1668];
  d[108] = d[1668];
  d[1704] = d[1668];
  d[76] = d[1672];
  d[106] = d[1672];
  d[1702] = d[1672];
  d[80] = d[1676];
  d[104] = d[1676];
  d[1700] = d[1676];
  d[84] = d[1680];
  d[96] = d[1680];
  d[1692] = d[1680];
  d[88] = d[1684];
  d[94] = d[1684];
  d[1690] = d[1684];
  d[92] = d[1688];
  d[1728] = d[1734];
  d[1726] = d[1738];
  d[1724] = d[1742];
  d[1716] = d[1746];
  d[1714] = d[1750];
  d[1712] = d[1754];
  d[1818] = d[1782];
  d[1816] = d[1786];
  d[1814] = d[1790];
  d[1806] = d[1794];
  d[1804] = d[1798];
  d[1842] = d[1848];
  d[1840] = d[1852];
  d[1838] = d[1856];
  d[1830] = d[1860];
  d[1828] = d[1864];
  d[1826] = d[1868];
  d[1932] = d[1896];
  d[1930] = d[1900];
  d[1928] = d[1904];
  d[1920] = d[1908];
  d[1918] = d[1912];
  d[1956] = d[1962];
  d[1954] = d[1966];
  d[1952] = d[1970];
  d[1944] = d[1974];
  d[1942] = d[1978];
  d[1940] = d[1982];
  d[2046] = d[2010];
  d[2044] = d[2014];
  d[2042] = d[2018];
  d[2034] = d[2022];
  d[2032] = d[2026];
  d[2070] = d[2076];
  d[2068] = d[2080];
  d[2066] = d[2084];
  d[2058] = d[2088];
  d[2056] = d[2092];
  d[2054] = d[2096];
  d[2160] = d[2124];
  d[2158] = d[2128];
  d[2156] = d[2132];
  d[2148] = d[2136];
  d[2146] = d[2140];
  d[2184] = d[2190];
  d[2182] = d[2194];
  d[2180] = d[2198];
  d[2172] = d[2202];
  d[2170] = d[2206];
  d[2168] = d[2210];
  d[2274] = d[2238];
  d[2272] = d[2242];
  d[2270] = d[2246];
  d[2262] = d[2250];
  d[2260] = d[2254];
  d[2298] = d[2304];
  d[2296] = d[2308];
  d[2294] = d[2312];
  d[2286] = d[2316];
  d[2284] = d[2320];
  d[2282] = d[2324];
  d[2388] = d[2352];
  d[2386] = d[2356];
  d[2384] = d[2360];
  d[2376] = d[2364];
  d[2374] = d[2368];
  d[2412] = d[2418];
  d[2410] = d[2422];
  d[2408] = d[2426];
  d[2400] = d[2430];
  d[2398] = d[2434];
  d[2396] = d[2438];
  d[2502] = d[2466];
  d[2500] = d[2470];
  d[2498] = d[2474];
  d[2490] = d[2478];
  d[2488] = d[2482];
  d[2526] = d[2532];
  d[2524] = d[2536];
  d[2522] = d[2540];
  d[2514] = d[2544];
  d[2512] = d[2548];
  d[2510] = d[2552];
  d[2616] = d[2580];
  d[2614] = d[2584];
  d[2612] = d[2588];
  d[2604] = d[2592];
  d[2602] = d[2596];
  d[2640] = d[2646];
  d[4236] = d[2646];
  d[4242] = d[2646];
  d[2638] = d[2650];
  d[4234] = d[2650];
  d[4246] = d[2650];
  d[2636] = d[2654];
  d[4232] = d[2654];
  d[4250] = d[2654];
  d[2628] = d[2658];
  d[4224] = d[2658];
  d[4254] = d[2658];
  d[2626] = d[2662];
  d[4222] = d[2662];
  d[4258] = d[2662];
  d[2624] = d[2666];
  d[4220] = d[2666];
  d[4262] = d[2666];
  d[4266] = d[2670];
  d[4270] = d[2674];
  d[4274] = d[2678];
  d[4278] = d[2682];
  d[4282] = d[2686];
  d[4286] = d[2690];
  d[2730] = d[2694];
  d[4290] = d[2694];
  d[4326] = d[2694];
  d[2728] = d[2698];
  d[4294] = d[2698];
  d[4324] = d[2698];
  d[2726] = d[2702];
  d[4298] = d[2702];
  d[4322] = d[2702];
  d[2718] = d[2706];
  d[4302] = d[2706];
  d[4314] = d[2706];
  d[2716] = d[2710];
  d[4306] = d[2710];
  d[4312] = d[2710];
  d[4310] = d[2714];
  d[2754] = d[2760];
  d[4122] = d[2760];
  d[4128] = d[2760];
  d[2752] = d[2764];
  d[4120] = d[2764];
  d[4132] = d[2764];
  d[2750] = d[2768];
  d[4118] = d[2768];
  d[4136] = d[2768];
  d[2742] = d[2772];
  d[4110] = d[2772];
  d[4140] = d[2772];
  d[2740] = d[2776];
  d[4108] = d[2776];
  d[4144] = d[2776];
  d[2738] = d[2780];
  d[4106] = d[2780];
  d[4148] = d[2780];
  d[4152] = d[2784];
  d[4156] = d[2788];
  d[4160] = d[2792];
  d[4164] = d[2796];
  d[4168] = d[2800];
  d[4172] = d[2804];
  d[2844] = d[2808];
  d[4176] = d[2808];
  d[4212] = d[2808];
  d[2842] = d[2812];
  d[4180] = d[2812];
  d[4210] = d[2812];
  d[2840] = d[2816];
  d[4184] = d[2816];
  d[4208] = d[2816];
  d[2832] = d[2820];
  d[4188] = d[2820];
  d[4200] = d[2820];
  d[2830] = d[2824];
  d[4192] = d[2824];
  d[4198] = d[2824];
  d[4196] = d[2828];
  d[2868] = d[2874];
  d[4008] = d[2874];
  d[4014] = d[2874];
  d[2866] = d[2878];
  d[4006] = d[2878];
  d[4018] = d[2878];
  d[2864] = d[2882];
  d[4004] = d[2882];
  d[4022] = d[2882];
  d[2856] = d[2886];
  d[3996] = d[2886];
  d[4026] = d[2886];
  d[2854] = d[2890];
  d[3994] = d[2890];
  d[4030] = d[2890];
  d[2852] = d[2894];
  d[3992] = d[2894];
  d[4034] = d[2894];
  d[4038] = d[2898];
  d[4042] = d[2902];
  d[4046] = d[2906];
  d[4050] = d[2910];
  d[4054] = d[2914];
  d[4058] = d[2918];
  d[2958] = d[2922];
  d[4062] = d[2922];
  d[4098] = d[2922];
  d[2956] = d[2926];
  d[4066] = d[2926];
  d[4096] = d[2926];
  d[2954] = d[2930];
  d[4070] = d[2930];
  d[4094] = d[2930];
  d[2946] = d[2934];
  d[4074] = d[2934];
  d[4086] = d[2934];
  d[2944] = d[2938];
  d[4078] = d[2938];
  d[4084] = d[2938];
  d[4082] = d[2942];
  d[2982] = d[2988];
  d[3894] = d[2988];
  d[3900] = d[2988];
  d[2980] = d[2992];
  d[3892] = d[2992];
  d[3904] = d[2992];
  d[2978] = d[2996];
  d[3890] = d[2996];
  d[3908] = d[2996];
  d[2970] = d[3000];
  d[3882] = d[3000];
  d[3912] = d[3000];
  d[2968] = d[3004];
  d[3880] = d[3004];
  d[3916] = d[3004];
  d[2966] = d[3008];
  d[3878] = d[3008];
  d[3920] = d[3008];
  d[3924] = d[3012];
  d[3928] = d[3016];
  d[3932] = d[3020];
  d[3936] = d[3024];
  d[3940] = d[3028];
  d[3944] = d[3032];
  d[3072] = d[3036];
  d[3948] = d[3036];
  d[3984] = d[3036];
  d[3070] = d[3040];
  d[3952] = d[3040];
  d[3982] = d[3040];
  d[3068] = d[3044];
  d[3956] = d[3044];
  d[3980] = d[3044];
  d[3060] = d[3048];
  d[3960] = d[3048];
  d[3972] = d[3048];
  d[3058] = d[3052];
  d[3964] = d[3052];
  d[3970] = d[3052];
  d[3968] = d[3056];
  d[3096] = d[3102];
  d[3780] = d[3102];
  d[3786] = d[3102];
  d[3094] = d[3106];
  d[3778] = d[3106];
  d[3790] = d[3106];
  d[3092] = d[3110];
  d[3776] = d[3110];
  d[3794] = d[3110];
  d[3084] = d[3114];
  d[3768] = d[3114];
  d[3798] = d[3114];
  d[3082] = d[3118];
  d[3766] = d[3118];
  d[3802] = d[3118];
  d[3080] = d[3122];
  d[3764] = d[3122];
  d[3806] = d[3122];
  d[3810] = d[3126];
  d[3814] = d[3130];
  d[3818] = d[3134];
  d[3822] = d[3138];
  d[3826] = d[3142];
  d[3830] = d[3146];
  d[3186] = d[3150];
  d[3834] = d[3150];
  d[3870] = d[3150];
  d[3184] = d[3154];
  d[3838] = d[3154];
  d[3868] = d[3154];
  d[3182] = d[3158];
  d[3842] = d[3158];
  d[3866] = d[3158];
  d[3174] = d[3162];
  d[3846] = d[3162];
  d[3858] = d[3162];
  d[3172] = d[3166];
  d[3850] = d[3166];
  d[3856] = d[3166];
  d[3854] = d[3170];
  d[3210] = d[3216];
  d[3666] = d[3216];
  d[3672] = d[3216];
  d[3208] = d[3220];
  d[3664] = d[3220];
  d[3676] = d[3220];
  d[3206] = d[3224];
  d[3662] = d[3224];
  d[3680] = d[3224];
  d[3198] = d[3228];
  d[3654] = d[3228];
  d[3684] = d[3228];
  d[3196] = d[3232];
  d[3652] = d[3232];
  d[3688] = d[3232];
  d[3194] = d[3236];
  d[3650] = d[3236];
  d[3692] = d[3236];
  d[3696] = d[3240];
  d[3700] = d[3244];
  d[3704] = d[3248];
  d[3708] = d[3252];
  d[3712] = d[3256];
  d[3716] = d[3260];
  d[3300] = d[3264];
  d[3720] = d[3264];
  d[3756] = d[3264];
  d[3298] = d[3268];
  d[3724] = d[3268];
  d[3754] = d[3268];
  d[3296] = d[3272];
  d[3728] = d[3272];
  d[3752] = d[3272];
  d[3288] = d[3276];
  d[3732] = d[3276];
  d[3744] = d[3276];
  d[3286] = d[3280];
  d[3736] = d[3280];
  d[3742] = d[3280];
  d[3740] = d[3284];
  d[3324] = d[3330];
  d[3552] = d[3330];
  d[3558] = d[3330];
  d[3322] = d[3334];
  d[3550] = d[3334];
  d[3562] = d[3334];
  d[3320] = d[3338];
  d[3548] = d[3338];
  d[3566] = d[3338];
  d[3312] = d[3342];
  d[3540] = d[3342];
  d[3570] = d[3342];
  d[3310] = d[3346];
  d[3538] = d[3346];
  d[3574] = d[3346];
  d[3308] = d[3350];
  d[3536] = d[3350];
  d[3578] = d[3350];
  d[3582] = d[3354];
  d[3586] = d[3358];
  d[3590] = d[3362];
  d[3594] = d[3366];
  d[3598] = d[3370];
  d[3602] = d[3374];
  d[3414] = d[3378];
  d[3606] = d[3378];
  d[3642] = d[3378];
  d[3412] = d[3382];
  d[3610] = d[3382];
  d[3640] = d[3382];
  d[3410] = d[3386];
  d[3614] = d[3386];
  d[3638] = d[3386];
  d[3402] = d[3390];
  d[3618] = d[3390];
  d[3630] = d[3390];
  d[3400] = d[3394];
  d[3622] = d[3394];
  d[3628] = d[3394];
  d[3626] = d[3398];
  d[3438] = d[3444];
  d[3436] = d[3448];
  d[3434] = d[3452];
  d[3426] = d[3456];
  d[3424] = d[3460];
  d[3422] = d[3464];
  d[3528] = d[3492];
  d[3526] = d[3496];
  d[3524] = d[3500];
  d[3516] = d[3504];
  d[3514] = d[3508];
}

void crop_final_image(__private uchar* src_data,__private uchar* dst_data) {
  int src_width = 28;

  int x_offset = 0;
  int y_offset = 0;

  int channels = 3;
  int dst_width = 24;
  int dst_height = 24;

  int src_bpp = channels * 8;  // bits per pixel

  int src_stride = (src_width * src_bpp + 7) / 8;  // bytes per row

  // Loop through source image and copy pixels to destination image
  for (int y = 0; y < dst_height; y++) {
    int src_y = y + y_offset;
    int src_index = src_y * src_stride;
    int dst_index = (((dst_height - y) - 1) * dst_height) * channels;

    for (int x = 0; x < dst_width; x++) {
      int src_x = x + x_offset;

      int src_shift = src_index + src_x * (src_bpp / 8);

      int dst_shift = dst_index + x * channels;

      dst_data[dst_shift + 0] = src_data[src_shift + 0];
      dst_data[dst_shift + 1] = src_data[src_shift + 1];
      dst_data[dst_shift + 2] = src_data[src_shift + 2];
    }
  }
}

void ocv2_filter2D(__private uchar* input_output_image,__private uchar* temp) {
  int width = 26, height = 26;

  float kernel_data[] = {0, -1, 0, -1, 5, -1, 0, -1, 0};

  int kernel_size = 3;

  _24x24_copyMakeBorder_1_1_1_1_BORDER_REFLECT_101(input_output_image, temp);

  // Iterate over each pixel of the input image
  int offset = kernel_size / 2;
  for (int y = offset; y < height - offset; y++) {
    for (int x = offset; x < width - offset; x++) {
      // Apply kernel to the current pixel and its neighboring pixels
      // Calculate the new value for each color channel (R,G,B) using the kernel
      float red = 0.0;
      float green = 0.0;
      float blue = 0.0;

      for (int j = -offset; j <= offset; j++) {
        for (int i = -offset; i <= offset; i++) {
          int index = ((y + j) * width + (x + i)) * 3;
          red += temp[index] *
                 kernel_data[(j + offset) * kernel_size + (i + offset)];
          green += temp[index + 1] *
                   kernel_data[(j + offset) * kernel_size + (i + offset)];
          blue += temp[index + 2] *
                  kernel_data[(j + offset) * kernel_size + (i + offset)];
        }
      }

      // Set the new values in the output image
      int index = (y * width + x) * 3;
      input_output_image[index] = OCV2_ROUND_AND_CLIP_PIXEL_VALUE(red);
      input_output_image[index + 1] = OCV2_ROUND_AND_CLIP_PIXEL_VALUE(green);
      input_output_image[index + 2] = OCV2_ROUND_AND_CLIP_PIXEL_VALUE(blue);
    }
  }
}

void ocv2_medianBlur(__private uchar* input_image,__private uchar* output_image,__private uchar* temp) {
  int width = 28, height = 24, cn = 3, m = 5;

  _28x28_crop_to__24x24_copyMakeBorder_0_0_2_2_BORDER_REPLICATE_BORDER_ISOLATED(
      input_image, temp);

  uchar* src = temp;
  uchar* dst = input_image;

  int x, y;
  int n2 = m * m / 2;
  int src_step = width * cn, dst_step = width * cn;
  const uchar* src_max = src + height * src_step;

  for (x = 0; x < width; x++, src += cn, dst += cn) {
    uchar* dst_cur = dst;
    const uchar* src_top = src;
    const uchar* src_bottom = src;
    int k, c;
    int src_step1 = src_step, dst_step1 = dst_step;

    if (x % 2 != 0) {
      src_bottom = src_top += src_step * (height - 1);
      dst_cur += dst_step * (height - 1);
      src_step1 = -src_step1;
      dst_step1 = -dst_step1;
    }

    int zone0[3][16] = {{0}};
    int zone1[3][16 * 16] = {{0}};

    for (y = 0; y <= m / 2; y++) {
      for (c = 0; c < cn; c++) {
        if (y > 0) {
          for (k = 0; k < m * cn; k += cn) {
            int p = (src_bottom[k + c]);
            zone1[c][p]++;
            zone0[c][p >> 4]++;
          }
        } else {
          for (k = 0; k < m * cn; k += cn) {
            int p = (src_bottom[k + c]);
            zone1[c][p] += m / 2 + 1;
            zone0[c][p >> 4] += m / 2 + 1;
          }
        }
      }

      if ((src_step1 > 0 && y < height - 1) ||
          (src_step1 < 0 && height - y - 1 > 0)) {
        src_bottom += src_step1;
      }
    }

    for (y = 0; y < height; y++, dst_cur += dst_step1) {
      for (c = 0; c < cn; c++) {
        int s = 0;
        for (k = 0;; k++) {
          int t = s + zone0[c][k];
          if (t > n2) break;
          s = t;
        }

        for (k *= 16;; k++) {
          s += zone1[c][k];
          if (s > n2) break;
        }

        dst_cur[c] = (uchar)k;
      }

      if (y + 1 == height) {
        break;
      }

      for (k = 0; k < m * 3; k += 3) {
        int p = (src_top[k]);
        zone1[0][p]--;
        zone0[0][p >> 4]--;

        p = (src_top[k + 1]);
        zone1[1][p]--;
        zone0[1][p >> 4]--;

        p = (src_top[k + 2]);
        zone1[2][p]--;
        zone0[2][p >> 4]--;

        p = (src_bottom[k]);
        zone1[0][p]++;
        zone0[0][p >> 4]++;

        p = (src_bottom[k + 1]);
        zone1[1][p]++;
        zone0[1][p >> 4]++;

        p = (src_bottom[k + 2]);
        zone1[2][p]++;
        zone0[2][p >> 4]++;
      }

      if ((src_step1 > 0 && src_bottom + src_step1 < src_max) ||
          (src_step1 < 0 && src_bottom + src_step1 >= src)) {
        src_bottom += src_step1;
      }

      if (y >= m / 2) {
        src_top += src_step1;
      }
    }
  }

  crop_final_image(input_image, output_image);
}

void ocv2_GaussianBlur(__private uchar* input_output_image,__private uchar* temp) {
  int width = 28;
  int height = 28;

  _24x24_copyMakeBorder_2_2_2_2_BORDER_REFLECT_101(input_output_image, temp);

  float kernel_data[] = {0.1875, 0.207031, 0.210938, 0.207031, 0.1875};

  // Iterate over each pixel of the input image
  int offset = 5 / 2;
  for (int y = offset; y < height - offset; y++) {
    for (int x = offset; x < width - offset; x++) {
      // Apply kernel to the current pixel and its neighboring pixels
      // Calculate the new value for each color channel (R,G,B) using the kernel
      float red = 0.0;
      float green = 0.0;
      float blue = 0.0;

      for (int j = -offset; j <= offset; j++) {
        for (int i = -offset; i <= offset; i++) {
          int index = ((y + j) * width + (x + i)) * 3;
          red += (float)(temp[index]) * kernel_data[i + offset] *
                 kernel_data[j + offset];
          green += (float)(temp[index + 1]) * kernel_data[i + offset] *
                   kernel_data[j + offset];
          blue += (float)(temp[index + 2]) * kernel_data[i + offset] *
                  kernel_data[j + offset];
        }
      }

      // Set the new values in the output image
      int index = (y * width + x) * 3;
      input_output_image[index] = OCV2_ROUND_AND_CLIP_PIXEL_VALUE(red);
      input_output_image[index + 1] = OCV2_ROUND_AND_CLIP_PIXEL_VALUE(green);
      input_output_image[index + 2] = OCV2_ROUND_AND_CLIP_PIXEL_VALUE(blue);
    }
  }
}

void ocv2_blur(__private uchar* input_output_image,__private uchar* temp) {
  int width = 24, height = 24, channels = 3, kernel_size = 5;

  int half_kernel_size = kernel_size / 2;

  // Pad the source image
  int padded_width = width + 2 * half_kernel_size;

  _26x26_crop_to_24x24_copyMakeBorder_2_2_2_2_BORDER_REFLECT_101(
      input_output_image, temp);

  // Apply the box filter to the padded image
  for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
      for (int c = 0; c < channels; c++) {
        float sum = 0;
        for (int ky = -half_kernel_size; ky <= half_kernel_size; ky++) {
          for (int kx = -half_kernel_size; kx <= half_kernel_size; kx++) {
            int yy = y + ky;
            int xx = x + kx;
            int padded_index = ((yy + half_kernel_size) * padded_width +
                                (xx + half_kernel_size)) *
                                   channels +
                               c;
            sum += temp[padded_index];
          }
        }
        input_output_image[(y * width + x) * channels + c] =
            OCV2_ROUND_AND_CLIP_PIXEL_VALUE(sum / (kernel_size * kernel_size));
      }
    }
  }
}

void ocv2_bilateralFilterInvoker(__private uchar* dst,__private const uchar* temp,
                                 __local int* radius, __local int* maxk,
                                 __local int* space_ofs,
                                 __local float* space_weight,
                                 __local float* color_weight) {
  int i, j, cn = 3, k;

  for (i = 0; i < 24; ++i) {
    const uchar* sptr = temp + ((i + (*radius)) * 38 + (*radius)) * cn;

    uchar* dptr = dst + i * 24 * cn;

    float sum_b[24] = {0};
    float sum_g[24] = {0};
    float sum_r[24] = {0};
    float wsum[24] = {0};

    k = 0;
    for (; k <= (*maxk) - 4; k += 4) {
      const uchar* ksptr0 = sptr + space_ofs[k];
      const uchar* ksptr1 = sptr + space_ofs[k + 1];
      const uchar* ksptr2 = sptr + space_ofs[k + 2];
      const uchar* ksptr3 = sptr + space_ofs[k + 3];
      const uchar* rsptr = sptr;
      j = 0;

      for (; j < 24; ++j, rsptr += 3, ksptr0 += 3, ksptr1 += 3, ksptr2 += 3,
                     ksptr3 += 3) {
        int rb = rsptr[0], rg = rsptr[1], rr = rsptr[2];
        int b = ksptr0[0], g = ksptr0[1], r = ksptr0[2];
        float w = space_weight[k] *
                  color_weight[abs(b - rb) + abs(g - rg) + abs(r - rr)];
        wsum[j] += w;
        sum_b[j] += b * w;
        sum_g[j] += g * w;
        sum_r[j] += r * w;

        b = ksptr1[0];
        g = ksptr1[1];
        r = ksptr1[2];
        w = space_weight[k + 1] *
            color_weight[abs(b - rb) + abs(g - rg) + abs(r - rr)];
        wsum[j] += w;
        sum_b[j] += b * w;
        sum_g[j] += g * w;
        sum_r[j] += r * w;

        b = ksptr2[0];
        g = ksptr2[1];
        r = ksptr2[2];
        w = space_weight[k + 2] *
            color_weight[abs(b - rb) + abs(g - rg) + abs(r - rr)];
        wsum[j] += w;
        sum_b[j] += b * w;
        sum_g[j] += g * w;
        sum_r[j] += r * w;

        b = ksptr3[0];
        g = ksptr3[1];
        r = ksptr3[2];
        w = space_weight[k + 3] *
            color_weight[abs(b - rb) + abs(g - rg) + abs(r - rr)];
        wsum[j] += w;
        sum_b[j] += b * w;
        sum_g[j] += g * w;
        sum_r[j] += r * w;
      }
    }

    for (; k < (*maxk); ++k) {
      const uchar* ksptr = sptr + space_ofs[k];
      const uchar* rsptr = sptr;
      j = 0;

      for (; j < 24; ++j, ksptr += 3, rsptr += 3) {
        int b = ksptr[0], g = ksptr[1], r = ksptr[2];
        float w = space_weight[k] *
                  color_weight[abs(b - rsptr[0]) + abs(g - rsptr[1]) +
                               abs(r - rsptr[2])];
        wsum[j] += w;
        sum_b[j] += b * w;
        sum_g[j] += g * w;
        sum_r[j] += r * w;
      }
    }

    for (j = 0; j < 24; ++j) {
      wsum[j] = 1.f / wsum[j];
      *(dptr++) = (uchar)OCV2_ROUND(sum_b[j] * wsum[j]);
      *(dptr++) = (uchar)OCV2_ROUND(sum_g[j] * wsum[j]);
      *(dptr++) = (uchar)OCV2_ROUND(sum_r[j] * wsum[j]);
    }
  }
}

void be32enc(__private void* pp,__private uint x) {
  uchar* p = (uchar*)pp;
  p[3] = x & 0xff;
  p[2] = (x >> 8) & 0xff;
  p[1] = (x >> 16) & 0xff;
  p[0] = (x >> 24) & 0xff;
}

#define bswap_32(x)                                           \
  ((((x) << 24) & 0xff000000u) | (((x) << 8) & 0x00ff0000u) | \
   (((x) >> 8) & 0x0000ff00u) | (((x) >> 24) & 0x000000ffu))

bool fulltest(__private const uint* hash, __local const uint* target) {
  int i;
  bool rc = true;

  for (i = 7; i >= 0; i--) {
    if (hash[i] > target[i]) {
      rc = false;
      break;
    }
    if (hash[i] < target[i]) {
      rc = true;
      break;
    }
  }

  return rc;
}

uint be32dec(__global const uchar* p) {
  return ((uint)(p[0]) << 24) | ((uint)(p[1]) << 16) | ((uint)(p[2]) << 8) |
         ((uint)(p[3]));
}

__kernel void search_hash(

    const uint current_step,
	const uint loop_count,

    __global const uchar* target_diff, __global const uchar* INIT_IMG,
    __global const uchar* block_header,

    __global uchar* found_nonce  // out

) {
	
	
   if(found_nonce[4]==1)
     return;

 
   size_t worker_thread_id = get_global_id(0);

   size_t global_work_size = get_global_size(0);

   uchar current_arr[38 * 38 * 3];
   uchar tmp_arr1[28 * 28 * 3];
   uchar tmp_arr2[28 * 28 * 3];

  __local uint local_target_diff[8];
  __local uchar local_init_image[24 * 24 * 3];

  __local int maxk, radius;

  __local float color_weight[3 * 256];
  __local float space_weight[15 * 15];
  __local int space_ofs[15 * 15];
  
  
  __local uchar loop_limit_index;


  if (get_local_id(0) == 0) {


    for ( int i = 0; i < 8; i++)
      local_target_diff[7 - i] = be32dec(target_diff + i*4);

    for ( int i = 0; i < 1728; i++) tmp_arr1[i] = INIT_IMG[i];

    _24x24_bmpdata_uchar_switch(tmp_arr1, tmp_arr2);

    for ( int i = 0; i < 1728; i++) local_init_image[i] = tmp_arr2[i];

     int d = 15;
     double sigma_color = 75;
     double sigma_space = 75;
     int cn = 3;
     int i, j;
     double gauss_color_coeff = -0.5 / (sigma_color * sigma_color);
     double gauss_space_coeff = -0.5 / (sigma_space * sigma_space);

    radius = d / 2;

    

    for (i = 0; i < 256 * cn; i++)
      color_weight[i] = (__private float)exp(i * i * gauss_color_coeff);

    for (i = -radius, maxk = 0; i <= radius; i++) {
      j = -radius;

      for (; j <= radius; j++) {
        double r = sqrt((__private double)i * i + (__private double)j * j);
        if (r > radius) continue;
        space_weight[maxk] = (__private float)exp(r * r * gauss_space_coeff);

        space_ofs[maxk++] = (__private int)(i * (38 * 3) + j * cn);
      }
    }
  
  loop_limit_index = loop_count - 1;
  
  }

  barrier(CLK_LOCAL_MEM_FENCE);

   uchar final_result[1782 + 80] = {
      0x42, 0x4D, 0xF6, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36,
      0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
      0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  for ( int i = 0; i < 76; i++)
    final_result[1782 + i] = block_header[i];

  be32enc(&final_result[1782 + 76],
          (__private uint)(current_step * global_work_size + worker_thread_id));

  final_result[1782 + 76] =
      final_result[1782 + 77];  // itarate 77! set_nonce_bytes_1 is more fast
                                // than set_nonce_bytes_0

   uint hash_result[8];
   uint reversed_hash[8];

  set_nonce_bytes_0(local_init_image, current_arr, final_result[1782 + 76]);
  set_nonce_bytes_2(local_init_image, current_arr, final_result[1782 + 78]);
  set_nonce_bytes_3(local_init_image, current_arr, final_result[1782 + 79]);

   uchar nonce = 0;
  while (1) {
    

    final_result[1782 + 77] = nonce;

    set_nonce_bytes_1(local_init_image, current_arr, final_result[1782 + 77]);

    ocv2_bilateralFilterInvoker(tmp_arr1, current_arr, &radius, &maxk,
                                space_ofs, space_weight, color_weight);

    ocv2_filter2D(tmp_arr1, tmp_arr2);

    ocv2_blur(tmp_arr1, tmp_arr2);

    ocv2_GaussianBlur(tmp_arr1, tmp_arr2);

    ocv2_medianBlur(tmp_arr1, &final_result[54], tmp_arr2);

    hash_private(( __private uint*)final_result, 1782 + 80, hash_result);

    if (bswap_32(hash_result[0]) <= local_target_diff[7]) {
      for ( int i = 0; i < 8; i++)
        reversed_hash[i] = bswap_32(hash_result[(7 - i)]);

      if (fulltest(reversed_hash, local_target_diff)) {
		  
		  
		found_nonce[4] = 1; 
        found_nonce[0] = final_result[1782 + 76];
        found_nonce[1] = final_result[1782 + 77];
        found_nonce[2] = final_result[1782 + 78];
        found_nonce[3] = final_result[1782 + 79];
		
        
      }
    }

    
    if (nonce == loop_limit_index) 
		break;
	nonce++;
  }
}